{"ast":null,"code":"var _jsxFileName = \"/Users/suyash/frontend-31a-ImSuis/src/components/SingleBlogPost.jsx\",\n  _s = $RefreshSig$();\n// import moment from 'moment';\n// import React, { useEffect, useState } from 'react';\n// import { toast } from \"react-toastify\";\n// import { deleteCommentApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\n\n// const SingleBlogPost = ({ blogId, loggedInUserId }) => {\n//     const [blog, setBlog] = useState(null);\n//     const [comments, setComments] = useState([]);\n//     const [replyingTo, setReplyingTo] = useState(null); // State to track which comment is being replied to\n//     const [commenting, setCommenting] = useState(false); // State to track whether the comment text field should be displayed\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const blogResponse = await getSingleBlogApi(blogId);\n//                 console.log('Blog Data:', blogResponse.data); // Log the blog data\n//                 setBlog(blogResponse.data.blog);\n\n//                 const commentsResponse = await getCommentsApi(blogId); // Fetch comments using the getCommentsApi function\n//                 console.log('Comments Data:', commentsResponse.data); // Log the comments data\n//                 setComments(commentsResponse.data.comments);\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//             }\n//         };\n\n//         fetchData();\n//     }, [blogId]);\n\n//     if (!blog) {\n//         return <div>Loading...</div>;\n//     }\n\n//     // Function to organize comments into a tree-like structure\n//     const organizeComments = (comments) => {\n//         const commentMap = new Map();\n//         const rootComments = [];\n\n//         // Map each comment to its ID\n//         comments.forEach(comment => {\n//             commentMap.set(comment._id, comment);\n//         });\n\n//         // Iterate over comments to build the tree\n//         comments.forEach(comment => {\n//             if (comment.parentComment) {\n//                 const parentComment = commentMap.get(comment.parentComment);\n//                 if (parentComment) {\n//                     if (!parentComment.replies) {\n//                         parentComment.replies = [];\n//                     }\n//                     parentComment.replies.push(comment);\n//                 }\n//             } else {\n//                 rootComments.push(comment);\n//             }\n//         });\n\n//         return rootComments;\n//     };\n\n//     // Organize comments into a tree-like structure\n//     const threadedComments = organizeComments(comments);\n\n//     // Function to handle click on the comment icon\n//     const handleCommentIconClick = () => {\n//         setCommenting(!commenting); // Toggle the commenting state\n//     };\n\n//     // Function to post a comment\n//     const handleCommentSubmit = async () => {\n//         // Get the content of the comment from the input field\n//         const commentContent = document.getElementById('commentInput').value;\n\n//         try {\n//             // Post the comment to the backend\n//             await postCommentApi(blogId, { content: commentContent });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n//             // Clear the input field and hide the comment text field\n//             document.getElementById('commentInput').value = '';\n//             setCommenting(false);\n//             toast.success(\"Comment posted successfully.\");\n//         } catch (error) {\n//             console.error('Error posting comment:', error);\n//         }\n//     };\n\n//     // Function to handle submitting a reply\n//     const handleReplySubmit = async (parentCommentId, replyContent) => {\n//         try {\n//             await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Clear replyingTo state\n//             setReplyingTo(null);\n//             toast.success(\"Reply posted successfully.\");\n//         } catch (error) {\n//             toast.error(\"Error posting reply.\");\n//             console.error('Error posting reply:', error);\n//         }\n//     };\n\n//     // Function to handle deleting a comment\n//     const handleDeleteComment = async (commentId) => {\n//         try {\n//             await deleteCommentApi(commentId);\n//             // Refresh comments after deleting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Show success toast message or perform any other necessary actions\n//             toast.success(\"Comment deleted successfully.\");\n//         } catch (error) {\n//             console.error('Error deleting comment:', error);\n//             // Show error toast message or perform any other necessary actions\n//             toast.error(\"You are not authorized to delete this comment.\");\n//         }\n//     };\n\n//     // Function to render threaded comments recursively\n//     const renderComments = (comments, renderedIds = new Set()) => {\n//         return (\n//             <ul className=\"list-unstyled\">\n//                 {comments.map(comment => {\n//                     if (renderedIds.has(comment._id)) {\n//                         return null; // Skip rendering if the comment is already rendered\n//                     }\n//                     renderedIds.add(comment._id); // Add comment ID to rendered set\n//                     return (\n//                         <li key={comment._id}>\n//                             <div>\n//                                 <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <small>Author:</small>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n//                                     </p>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <strong>Date:</strong>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                                     </p>\n//                                 </div>\n//                                 <p>{comment.content}</p>\n//                                 <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n//                                     {(comment.user.id === loggedInUserId || loggedInUserId === 'admin') && ( // Check if the logged-in user is the author of the comment or is an admin\n//                                         <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i> // Delete icon with onClick event\n//                                     )}\n//                                     <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i> {/* Bootstrap reply icon */}\n//                                 </div>\n//                                 {replyingTo === comment._id && ( // Conditional rendering for reply text field\n//                                     <div className=\"reply-text-field\">\n//                                         <div className=\"input-group mb-3\">\n//                                             <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n//                                         </div>\n//                                     </div>\n//                                 )}\n//                             </div>\n//                             {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>} {/* Render replies recursively */}\n//                         </li>\n//                     );\n//                 })}\n//             </ul>\n//         );\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h2>{blog.title}</h2>\n//                     <p className=\"small text-muted mb-2\">\n//                         <strong>Author:</strong>{' '}\n//                         <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n//                     </p>\n//                     <p className=\"small text-muted mb-4\">\n//                         <strong>Date:</strong>{' '}\n//                         <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                     </p>\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <img\n//                         src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n//                         alt={blog.title}\n//                         className=\"img-fluid mb-4\"\n//                     />\n//                     <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n//                     <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n//                         <i className=\"bi bi-chat-square-dots\"></i> {/* Bootstrap comment icon */}\n//                     </div>\n//                     {commenting && ( // Conditional rendering for the comment text field\n//                         <div className=\"comment-text-field\">\n//                             <div className=\"input-group mb-3\">\n//                                 <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n//                             </div>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h4 className=\"mt-5\">Comments:</h4>\n//                     {renderComments(threadedComments)}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SingleBlogPost;\n\n// const handleEditBlog = () => {\n\n// }\n\n// const handleDeleteBlog = () => {\n\n// }\n\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from 'react-toastify';\nimport { deleteBlogApi, deleteCommentApi, editBlogApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SingleBlogPost = ({\n  blogId,\n  loggedInUserId\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [blog, setBlog] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [replyingTo, setReplyingTo] = useState(null);\n  const [commenting, setCommenting] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const blogResponse = await getSingleBlogApi(blogId);\n        setBlog(blogResponse.data.blog);\n        const commentsResponse = await getCommentsApi(blogId);\n        setComments(commentsResponse.data.comments);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [blogId]);\n  if (!blog) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 16\n    }, this);\n  }\n  console.log('Author ID:', blog.user._id);\n  console.log('Logged In User ID:', loggedInUserId);\n  const organizeComments = comments => {\n    const commentMap = new Map();\n    const rootComments = [];\n    comments.forEach(comment => {\n      commentMap.set(comment._id, comment);\n    });\n    comments.forEach(comment => {\n      if (comment.parentComment) {\n        const parentComment = commentMap.get(comment.parentComment);\n        if (parentComment) {\n          if (!parentComment.replies) {\n            parentComment.replies = [];\n          }\n          parentComment.replies.push(comment);\n        }\n      } else {\n        rootComments.push(comment);\n      }\n    });\n    return rootComments;\n  };\n  const threadedComments = organizeComments(comments);\n  const handleCommentIconClick = () => {\n    setCommenting(!commenting);\n  };\n  const handleCommentSubmit = async () => {\n    const commentContent = document.getElementById('commentInput').value;\n    try {\n      await postCommentApi(blogId, {\n        content: commentContent\n      });\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n      document.getElementById('commentInput').value = '';\n      setCommenting(false);\n      toast.success(\"Comment posted successfully.\");\n    } catch (error) {\n      console.error('Error posting comment:', error);\n    }\n  };\n  const handleReplySubmit = async (parentCommentId, replyContent) => {\n    try {\n      await postCommentApi(blogId, {\n        content: replyContent,\n        parentComment: parentCommentId\n      });\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n      setReplyingTo(null);\n      toast.success(\"Reply posted successfully.\");\n    } catch (error) {\n      toast.error(\"Error posting reply.\");\n      console.error('Error posting reply:', error);\n    }\n  };\n  const handleDeleteComment = async commentId => {\n    try {\n      await deleteCommentApi(commentId);\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n      toast.success(\"Comment deleted successfully.\");\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      toast.error(\"You are not authorized to delete this comment.\");\n    }\n  };\n  const handleEditBlog = async blogId => {\n    try {\n      // Call the editBlogApi function to edit the blog\n      await editBlogApi(blogId);\n      navigate(`/edit-blog/${blogId}`);\n    } catch (error) {\n      console.error('Error editing blog:', error);\n    }\n  };\n  const handleDeleteBlog = async () => {\n    const confirmDialog = window.confirm(\"Are you sure you want to delete this product?\");\n    if (!confirmDialog) {\n      return;\n    } else {\n      await deleteBlogApi(blogId);\n      navigate('/');\n      toast.success(\"Blog deleted successfully.\");\n    }\n  };\n  const renderComments = (comments, renderedIds = new Set()) => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-unstyled\",\n      children: comments.map(comment => {\n        if (renderedIds.has(comment._id)) {\n          return null;\n        }\n        renderedIds.add(comment._id);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-meta\",\n              style: {\n                marginBottom: '0.5em'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small text-muted\",\n                style: {\n                  fontSize: '0.9em',\n                  margin: '0'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Author:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 41\n                }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-grey\",\n                  style: {\n                    fontSize: '0.8em'\n                  },\n                  children: `${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small text-muted\",\n                style: {\n                  fontSize: '0.9em',\n                  margin: '0'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 41\n                }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-grey\",\n                  style: {\n                    fontSize: '0.8em'\n                  },\n                  children: moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 37\n              }, this), comment.user._id === loggedInUserId && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"action-icons\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-trash-fill\",\n                  onClick: () => handleDeleteComment(comment._id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"action-icons\",\n                style: {\n                  marginTop: '-1em'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-reply-fill\",\n                  onClick: () => setReplyingTo(comment._id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: comment.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-icons\",\n              style: {\n                marginTop: '-1em'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bi bi-reply-fill\",\n                onClick: () => setReplyingTo(comment._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 33\n            }, this), replyingTo === comment._id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"reply-text-field\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-group mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"replyInput\",\n                  type: \"text\",\n                  className: \"form-control\",\n                  placeholder: \"Write a reply...\",\n                  style: {\n                    width: 'calc(100% - 42px)',\n                    marginBottom: '0.5em'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-outline-dark me-2\",\n                  type: \"button\",\n                  style: {\n                    backgroundColor: 'white',\n                    color: 'black',\n                    borderRadius: '35px',\n                    marginBottom: '0.5em'\n                  },\n                  onClick: () => setReplyingTo(null),\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-outline-dark me-2\",\n                  type: \"button\",\n                  style: {\n                    backgroundColor: 'black',\n                    color: 'white',\n                    borderRadius: '35px',\n                    marginBottom: '0.5em'\n                  },\n                  onClick: () => handleReplySubmit(comment._id, document.getElementById('replyInput').value),\n                  children: \"Reply\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 29\n          }, this), comment.replies && /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: renderComments(comment.replies, renderedIds)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 49\n          }, this)]\n        }, comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: blog.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 25\n          }, this), blog.user._id === loggedInUserId && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"action-icons\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-pencil-fill me-3\",\n              onClick: () => handleEditBlog(blog._id),\n              style: {\n                fontSize: '1.5rem'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-trash-fill\",\n              onClick: () => handleDeleteBlog(blog._id),\n              style: {\n                fontSize: '1.5rem'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"small text-muted mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Author:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 25\n          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-grey\",\n            children: `${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"small text-muted mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 25\n          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-grey\",\n            children: moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: blog.blogImageUrl || 'https://via.placeholder.com/600x400',\n          alt: blog.title,\n          className: \"img-fluid mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: blog.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-icon\",\n          style: {\n            textAlign: 'left',\n            marginTop: '1em'\n          },\n          onClick: handleCommentIconClick,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-chat-square-dots\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 21\n        }, this), commenting && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-text-field\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"commentInput\",\n              type: \"text\",\n              className: \"form-control\",\n              placeholder: \"Write a comment...\",\n              style: {\n                width: 'calc(100% - 42px)',\n                marginBottom: '0.5em'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-dark me-2\",\n              type: \"button\",\n              style: {\n                backgroundColor: 'white',\n                color: 'black',\n                borderRadius: '35px',\n                marginBottom: '0.5em'\n              },\n              onClick: () => setCommenting(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-dark me-2\",\n              type: \"button\",\n              style: {\n                backgroundColor: 'black',\n                color: 'white',\n                borderRadius: '35px',\n                marginBottom: '0.5em'\n              },\n              onClick: handleCommentSubmit,\n              children: \"Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"mt-5\",\n          children: \"Comments:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 21\n        }, this), renderComments(threadedComments)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 9\n  }, this);\n};\n_s(SingleBlogPost, \"tyeFWq0tvCbeK566cRggnQaUox0=\", false, function () {\n  return [useNavigate];\n});\n_c = SingleBlogPost;\nexport default SingleBlogPost;\nvar _c;\n$RefreshReg$(_c, \"SingleBlogPost\");","map":{"version":3,"names":["moment","React","useEffect","useState","useNavigate","toast","deleteBlogApi","deleteCommentApi","editBlogApi","getCommentsApi","getSingleBlogApi","postCommentApi","jsxDEV","_jsxDEV","SingleBlogPost","blogId","loggedInUserId","_s","navigate","blog","setBlog","comments","setComments","replyingTo","setReplyingTo","commenting","setCommenting","fetchData","blogResponse","data","commentsResponse","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","log","user","_id","organizeComments","commentMap","Map","rootComments","forEach","comment","set","parentComment","get","replies","push","threadedComments","handleCommentIconClick","handleCommentSubmit","commentContent","document","getElementById","value","content","success","handleReplySubmit","parentCommentId","replyContent","handleDeleteComment","commentId","handleEditBlog","handleDeleteBlog","confirmDialog","window","confirm","renderComments","renderedIds","Set","className","map","has","add","style","marginBottom","fontSize","margin","firstName","lastName","createdAt","format","onClick","marginTop","id","type","placeholder","width","backgroundColor","color","borderRadius","title","src","blogImageUrl","alt","whiteSpace","textAlign","_c","$RefreshReg$"],"sources":["/Users/suyash/frontend-31a-ImSuis/src/components/SingleBlogPost.jsx"],"sourcesContent":["// import moment from 'moment';\n// import React, { useEffect, useState } from 'react';\n// import { toast } from \"react-toastify\";\n// import { deleteCommentApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\n\n// const SingleBlogPost = ({ blogId, loggedInUserId }) => {\n//     const [blog, setBlog] = useState(null);\n//     const [comments, setComments] = useState([]);\n//     const [replyingTo, setReplyingTo] = useState(null); // State to track which comment is being replied to\n//     const [commenting, setCommenting] = useState(false); // State to track whether the comment text field should be displayed\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const blogResponse = await getSingleBlogApi(blogId);\n//                 console.log('Blog Data:', blogResponse.data); // Log the blog data\n//                 setBlog(blogResponse.data.blog);\n\n//                 const commentsResponse = await getCommentsApi(blogId); // Fetch comments using the getCommentsApi function\n//                 console.log('Comments Data:', commentsResponse.data); // Log the comments data\n//                 setComments(commentsResponse.data.comments);\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//             }\n//         };\n\n//         fetchData();\n//     }, [blogId]);\n\n//     if (!blog) {\n//         return <div>Loading...</div>;\n//     }\n\n//     // Function to organize comments into a tree-like structure\n//     const organizeComments = (comments) => {\n//         const commentMap = new Map();\n//         const rootComments = [];\n\n//         // Map each comment to its ID\n//         comments.forEach(comment => {\n//             commentMap.set(comment._id, comment);\n//         });\n\n//         // Iterate over comments to build the tree\n//         comments.forEach(comment => {\n//             if (comment.parentComment) {\n//                 const parentComment = commentMap.get(comment.parentComment);\n//                 if (parentComment) {\n//                     if (!parentComment.replies) {\n//                         parentComment.replies = [];\n//                     }\n//                     parentComment.replies.push(comment);\n//                 }\n//             } else {\n//                 rootComments.push(comment);\n//             }\n//         });\n\n//         return rootComments;\n//     };\n\n//     // Organize comments into a tree-like structure\n//     const threadedComments = organizeComments(comments);\n\n//     // Function to handle click on the comment icon\n//     const handleCommentIconClick = () => {\n//         setCommenting(!commenting); // Toggle the commenting state\n//     };\n\n//     // Function to post a comment\n//     const handleCommentSubmit = async () => {\n//         // Get the content of the comment from the input field\n//         const commentContent = document.getElementById('commentInput').value;\n\n//         try {\n//             // Post the comment to the backend\n//             await postCommentApi(blogId, { content: commentContent });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n//             // Clear the input field and hide the comment text field\n//             document.getElementById('commentInput').value = '';\n//             setCommenting(false);\n//             toast.success(\"Comment posted successfully.\");\n//         } catch (error) {\n//             console.error('Error posting comment:', error);\n//         }\n//     };\n\n//     // Function to handle submitting a reply\n//     const handleReplySubmit = async (parentCommentId, replyContent) => {\n//         try {\n//             await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Clear replyingTo state\n//             setReplyingTo(null);\n//             toast.success(\"Reply posted successfully.\");\n//         } catch (error) {\n//             toast.error(\"Error posting reply.\");\n//             console.error('Error posting reply:', error);\n//         }\n//     };\n\n//     // Function to handle deleting a comment\n//     const handleDeleteComment = async (commentId) => {\n//         try {\n//             await deleteCommentApi(commentId);\n//             // Refresh comments after deleting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Show success toast message or perform any other necessary actions\n//             toast.success(\"Comment deleted successfully.\");\n//         } catch (error) {\n//             console.error('Error deleting comment:', error);\n//             // Show error toast message or perform any other necessary actions\n//             toast.error(\"You are not authorized to delete this comment.\");\n//         }\n//     };\n\n//     // Function to render threaded comments recursively\n//     const renderComments = (comments, renderedIds = new Set()) => {\n//         return (\n//             <ul className=\"list-unstyled\">\n//                 {comments.map(comment => {\n//                     if (renderedIds.has(comment._id)) {\n//                         return null; // Skip rendering if the comment is already rendered\n//                     }\n//                     renderedIds.add(comment._id); // Add comment ID to rendered set\n//                     return (\n//                         <li key={comment._id}>\n//                             <div>\n//                                 <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <small>Author:</small>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n//                                     </p>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <strong>Date:</strong>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                                     </p>\n//                                 </div>\n//                                 <p>{comment.content}</p>\n//                                 <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n//                                     {(comment.user.id === loggedInUserId || loggedInUserId === 'admin') && ( // Check if the logged-in user is the author of the comment or is an admin\n//                                         <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i> // Delete icon with onClick event\n//                                     )}\n//                                     <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i> {/* Bootstrap reply icon */}\n//                                 </div>\n//                                 {replyingTo === comment._id && ( // Conditional rendering for reply text field\n//                                     <div className=\"reply-text-field\">\n//                                         <div className=\"input-group mb-3\">\n//                                             <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n//                                         </div>\n//                                     </div>\n//                                 )}\n//                             </div>\n//                             {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>} {/* Render replies recursively */}\n//                         </li>\n//                     );\n//                 })}\n//             </ul>\n//         );\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h2>{blog.title}</h2>\n//                     <p className=\"small text-muted mb-2\">\n//                         <strong>Author:</strong>{' '}\n//                         <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n//                     </p>\n//                     <p className=\"small text-muted mb-4\">\n//                         <strong>Date:</strong>{' '}\n//                         <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                     </p>\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <img\n//                         src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n//                         alt={blog.title}\n//                         className=\"img-fluid mb-4\"\n//                     />\n//                     <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n//                     <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n//                         <i className=\"bi bi-chat-square-dots\"></i> {/* Bootstrap comment icon */}\n//                     </div>\n//                     {commenting && ( // Conditional rendering for the comment text field\n//                         <div className=\"comment-text-field\">\n//                             <div className=\"input-group mb-3\">\n//                                 <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n//                             </div>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h4 className=\"mt-5\">Comments:</h4>\n//                     {renderComments(threadedComments)}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SingleBlogPost;\n\n// const handleEditBlog = () => {\n\n// }\n\n// const handleDeleteBlog = () => {\n\n// }\n\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from 'react-toastify';\n\nimport { deleteBlogApi, deleteCommentApi, editBlogApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\n\nconst SingleBlogPost = ({ blogId, loggedInUserId }) => {\n    const navigate = useNavigate();\n    const [blog, setBlog] = useState(null);\n    const [comments, setComments] = useState([]);\n    const [replyingTo, setReplyingTo] = useState(null);\n    const [commenting, setCommenting] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const blogResponse = await getSingleBlogApi(blogId);\n                setBlog(blogResponse.data.blog);\n\n                const commentsResponse = await getCommentsApi(blogId);\n                setComments(commentsResponse.data.comments);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData();\n    }, [blogId]);\n\n    if (!blog) {\n        return <div>Loading...</div>;\n    }\n\n    console.log('Author ID:', blog.user._id);\n    console.log('Logged In User ID:', loggedInUserId);\n\n\n    const organizeComments = (comments) => {\n        const commentMap = new Map();\n        const rootComments = [];\n\n        comments.forEach(comment => {\n            commentMap.set(comment._id, comment);\n        });\n\n        comments.forEach(comment => {\n            if (comment.parentComment) {\n                const parentComment = commentMap.get(comment.parentComment);\n                if (parentComment) {\n                    if (!parentComment.replies) {\n                        parentComment.replies = [];\n                    }\n                    parentComment.replies.push(comment);\n                }\n            } else {\n                rootComments.push(comment);\n            }\n        });\n\n        return rootComments;\n    };\n\n    const threadedComments = organizeComments(comments);\n\n    const handleCommentIconClick = () => {\n        setCommenting(!commenting);\n    };\n\n    const handleCommentSubmit = async () => {\n        const commentContent = document.getElementById('commentInput').value;\n\n        try {\n            await postCommentApi(blogId, { content: commentContent });\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n            document.getElementById('commentInput').value = '';\n            setCommenting(false);\n            toast.success(\"Comment posted successfully.\");\n        } catch (error) {\n            console.error('Error posting comment:', error);\n        }\n    };\n\n    const handleReplySubmit = async (parentCommentId, replyContent) => {\n        try {\n            await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n            setReplyingTo(null);\n            toast.success(\"Reply posted successfully.\");\n        } catch (error) {\n            toast.error(\"Error posting reply.\");\n            console.error('Error posting reply:', error);\n        }\n    };\n\n    const handleDeleteComment = async (commentId) => {\n        try {\n            await deleteCommentApi(commentId);\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n            toast.success(\"Comment deleted successfully.\");\n        } catch (error) {\n            console.error('Error deleting comment:', error);\n            toast.error(\"You are not authorized to delete this comment.\");\n        }\n    };\n\n    const handleEditBlog = async (blogId) => {\n        try {\n            // Call the editBlogApi function to edit the blog\n            await editBlogApi(blogId);\n            navigate(`/edit-blog/${blogId}`);\n        } catch (error) {\n            console.error('Error editing blog:', error);\n        }\n    };\n\n    const handleDeleteBlog = async () => {\n        const confirmDialog = window.confirm(\"Are you sure you want to delete this product?\")\n        if (!confirmDialog) {\n            return;\n        } else {\n            await deleteBlogApi(blogId);\n            navigate('/')\n            toast.success(\"Blog deleted successfully.\");\n        }\n    };\n\n    const renderComments = (comments, renderedIds = new Set()) => {\n        return (\n            <ul className=\"list-unstyled\">\n                {comments.map(comment => {\n                    if (renderedIds.has(comment._id)) {\n                        return null;\n                    }\n                    renderedIds.add(comment._id);\n                    return (\n                        <li key={comment._id}>\n                            <div>\n                                <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n                                    <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n                                        <small>Author:</small>{' '}\n                                        <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n                                    </p>\n                                    <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n                                        <strong>Date:</strong>{' '}\n                                        <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n                                    </p>\n                                    {(comment.user._id === loggedInUserId) && (\n                                        <div className=\"action-icons\">\n                                            <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i>\n                                        </div>\n                                    )}\n                                    <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n                                        <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i>\n                                    </div>\n                                </div>\n                                <p>{comment.content}</p>\n                                <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n                                    <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i>\n                                </div>\n                                {replyingTo === comment._id && (\n                                    <div className=\"reply-text-field\">\n                                        <div className=\"input-group mb-3\">\n                                            <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n                                            <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n                                            <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                            {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>}\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                        <h2>{blog.title}</h2>\n                        {(blog.user._id === loggedInUserId) && (\n                            <div className=\"action-icons\">\n                                <i className=\"bi bi-pencil-fill me-3\" onClick={() => handleEditBlog(blog._id)} style={{ fontSize: '1.5rem' }}></i>\n                                <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteBlog(blog._id)} style={{ fontSize: '1.5rem' }}></i>\n                            </div>\n\n                        )}\n                    </div>\n                    <p className=\"small text-muted mb-2\">\n                        <strong>Author:</strong>{' '}\n                        <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n                    </p>\n                    <p className=\"small text-muted mb-4\">\n                        <strong>Date:</strong>{' '}\n                        <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n                    </p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    <img\n                        src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n                        alt={blog.title}\n                        className=\"img-fluid mb-4\"\n                    />\n                    <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n                    <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n                        <i className=\"bi bi-chat-square-dots\"></i>\n                    </div>\n                    {commenting && (\n                        <div className=\"comment-text-field\">\n                            <div className=\"input-group mb-3\">\n                                <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n                                <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n                                <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    <h4 className=\"mt-5\">Comments:</h4>\n                    {renderComments(threadedComments)}\n                </div>\n            </div>\n        </div>\n    );\n\n};\n\nexport default SingleBlogPost;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,aAAa,EAAEC,gBAAgB,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}