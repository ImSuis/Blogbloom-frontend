{"ast":null,"code":"var _jsxFileName = \"/Users/suyash/frontend-31a-ImSuis/src/components/SingleBlogPost.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getCommentsApi, getSingleBlogApi } from '../api/Api'; // Adjust import path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SingleBlogPost = ({\n  blogId\n}) => {\n  _s();\n  const [blog, setBlog] = useState(null);\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    const fetchBlog = async () => {\n      try {\n        const response = await getSingleBlogApi(blogId);\n        setBlog(response.data.blog);\n      } catch (error) {\n        console.error('Error fetching single blog post:', error);\n      }\n    };\n    const fetchComments = async () => {\n      try {\n        const response = await getCommentsApi(blogId);\n        setComments(response.data.comments || []); // Set comments to an empty array if response.data.comments is undefined\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    fetchBlog();\n    fetchComments();\n  }, [blogId]);\n\n  // Function to organize comments into a hierarchical structure\n  const organizeComments = comments => {\n    const commentMap = new Map();\n    const topLevelComments = [];\n\n    // Map each comment to its parent comment ID\n    comments.forEach(comment => {\n      const parentCommentId = comment.parentComment || null;\n      if (!commentMap.has(parentCommentId)) {\n        commentMap.set(parentCommentId, []);\n      }\n      commentMap.get(parentCommentId).push(comment);\n    });\n\n    // Recursively build the comment tree\n    const buildCommentTree = parentId => {\n      const children = commentMap.get(parentId) || [];\n      children.forEach(child => {\n        child.children = buildCommentTree(child._id);\n      });\n      return children;\n    };\n\n    // Get top-level comments (comments with no parent comment)\n    topLevelComments.push(...(commentMap.get(null) || []));\n\n    // Organize comments into hierarchical structure\n    topLevelComments.forEach(comment => {\n      comment.children = buildCommentTree(comment._id);\n    });\n    return topLevelComments;\n  };\n\n  // Function to render a single comment and its children recursively\n  const renderComment = comment => {\n    var _comment$user, _comment$user2;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Comment ID: \", comment._id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Author: \", `${((_comment$user = comment.user) === null || _comment$user === void 0 ? void 0 : _comment$user.firstName) || 'Unknown'} ${((_comment$user2 = comment.user) === null || _comment$user2 === void 0 ? void 0 : _comment$user2.lastName) || 'Unknown'}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), comment.children && comment.children.map(renderComment)]\n    }, comment._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this);\n  };\n  if (!blog) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media my-4 d-flex align-items-start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n      children: \"Comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), organizeComments(comments).map(renderComment)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(SingleBlogPost, \"3ZvKXLKGgxhFb+S9OCk4u5BbZeM=\");\n_c = SingleBlogPost;\nexport default SingleBlogPost;\nvar _c;\n$RefreshReg$(_c, \"SingleBlogPost\");","map":{"version":3,"names":["React","useEffect","useState","getCommentsApi","getSingleBlogApi","jsxDEV","_jsxDEV","SingleBlogPost","blogId","_s","blog","setBlog","comments","setComments","fetchBlog","response","data","error","console","fetchComments","organizeComments","commentMap","Map","topLevelComments","forEach","comment","parentCommentId","parentComment","has","set","get","push","buildCommentTree","parentId","children","child","_id","renderComment","_comment$user","_comment$user2","fileName","_jsxFileName","lineNumber","columnNumber","content","user","firstName","lastName","map","className","_c","$RefreshReg$"],"sources":["/Users/suyash/frontend-31a-ImSuis/src/components/SingleBlogPost.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getCommentsApi, getSingleBlogApi } from '../api/Api'; // Adjust import path\n\nconst SingleBlogPost = ({ blogId }) => {\n    const [blog, setBlog] = useState(null);\n    const [comments, setComments] = useState([]);\n\n    useEffect(() => {\n        const fetchBlog = async () => {\n            try {\n                const response = await getSingleBlogApi(blogId);\n                setBlog(response.data.blog);\n            } catch (error) {\n                console.error('Error fetching single blog post:', error);\n            }\n        };\n\n        const fetchComments = async () => {\n            try {\n                const response = await getCommentsApi(blogId);\n                setComments(response.data.comments || []); // Set comments to an empty array if response.data.comments is undefined\n            } catch (error) {\n                console.error('Error fetching comments:', error);\n            }\n        };\n\n        fetchBlog();\n        fetchComments();\n    }, [blogId]);\n\n    // Function to organize comments into a hierarchical structure\n    const organizeComments = (comments) => {\n        const commentMap = new Map();\n        const topLevelComments = [];\n\n        // Map each comment to its parent comment ID\n        comments.forEach(comment => {\n            const parentCommentId = comment.parentComment || null;\n            if (!commentMap.has(parentCommentId)) {\n                commentMap.set(parentCommentId, []);\n            }\n            commentMap.get(parentCommentId).push(comment);\n        });\n\n        // Recursively build the comment tree\n        const buildCommentTree = (parentId) => {\n            const children = commentMap.get(parentId) || [];\n            children.forEach(child => {\n                child.children = buildCommentTree(child._id);\n            });\n            return children;\n        };\n\n        // Get top-level comments (comments with no parent comment)\n        topLevelComments.push(...commentMap.get(null) || []);\n\n        // Organize comments into hierarchical structure\n        topLevelComments.forEach(comment => {\n            comment.children = buildCommentTree(comment._id);\n        });\n\n        return topLevelComments;\n    };\n\n    // Function to render a single comment and its children recursively\n    const renderComment = (comment) => (\n        <div key={comment._id}>\n            <p>Comment ID: {comment._id}</p> {/* For debugging */}\n            <p>{comment.content}</p>\n            <p>Author: {`${comment.user?.firstName || 'Unknown'} ${comment.user?.lastName || 'Unknown'}`}</p>\n            {comment.children && comment.children.map(renderComment)}\n        </div>\n    );\n\n    if (!blog) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <div className=\"media my-4 d-flex align-items-start\">\n                {/* Render blog details here */}\n            </div>\n            <h6>Comments:</h6>\n            {organizeComments(comments).map(renderComment)}\n        </div>\n    );\n};\n\nexport default SingleBlogPost;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}