{"ast":null,"code":"var _jsxFileName = \"/Users/suyash/frontend-31a-ImSuis/src/components/SingleBlogPost.jsx\",\n  _s = $RefreshSig$();\n// import moment from 'moment';\n// import React, { useEffect, useState } from 'react';\n// import { toast } from \"react-toastify\";\n// import { deleteCommentApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\n\n// const SingleBlogPost = ({ blogId, loggedInUserId }) => {\n//     const [blog, setBlog] = useState(null);\n//     const [comments, setComments] = useState([]);\n//     const [replyingTo, setReplyingTo] = useState(null); // State to track which comment is being replied to\n//     const [commenting, setCommenting] = useState(false); // State to track whether the comment text field should be displayed\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const blogResponse = await getSingleBlogApi(blogId);\n//                 console.log('Blog Data:', blogResponse.data); // Log the blog data\n//                 setBlog(blogResponse.data.blog);\n\n//                 const commentsResponse = await getCommentsApi(blogId); // Fetch comments using the getCommentsApi function\n//                 console.log('Comments Data:', commentsResponse.data); // Log the comments data\n//                 setComments(commentsResponse.data.comments);\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//             }\n//         };\n\n//         fetchData();\n//     }, [blogId]);\n\n//     if (!blog) {\n//         return <div>Loading...</div>;\n//     }\n\n//     // Function to organize comments into a tree-like structure\n//     const organizeComments = (comments) => {\n//         const commentMap = new Map();\n//         const rootComments = [];\n\n//         // Map each comment to its ID\n//         comments.forEach(comment => {\n//             commentMap.set(comment._id, comment);\n//         });\n\n//         // Iterate over comments to build the tree\n//         comments.forEach(comment => {\n//             if (comment.parentComment) {\n//                 const parentComment = commentMap.get(comment.parentComment);\n//                 if (parentComment) {\n//                     if (!parentComment.replies) {\n//                         parentComment.replies = [];\n//                     }\n//                     parentComment.replies.push(comment);\n//                 }\n//             } else {\n//                 rootComments.push(comment);\n//             }\n//         });\n\n//         return rootComments;\n//     };\n\n//     // Organize comments into a tree-like structure\n//     const threadedComments = organizeComments(comments);\n\n//     // Function to handle click on the comment icon\n//     const handleCommentIconClick = () => {\n//         setCommenting(!commenting); // Toggle the commenting state\n//     };\n\n//     // Function to post a comment\n//     const handleCommentSubmit = async () => {\n//         // Get the content of the comment from the input field\n//         const commentContent = document.getElementById('commentInput').value;\n\n//         try {\n//             // Post the comment to the backend\n//             await postCommentApi(blogId, { content: commentContent });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n//             // Clear the input field and hide the comment text field\n//             document.getElementById('commentInput').value = '';\n//             setCommenting(false);\n//             toast.success(\"Comment posted successfully.\");\n//         } catch (error) {\n//             console.error('Error posting comment:', error);\n//         }\n//     };\n\n//     // Function to handle submitting a reply\n//     const handleReplySubmit = async (parentCommentId, replyContent) => {\n//         try {\n//             await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Clear replyingTo state\n//             setReplyingTo(null);\n//             toast.success(\"Reply posted successfully.\");\n//         } catch (error) {\n//             toast.error(\"Error posting reply.\");\n//             console.error('Error posting reply:', error);\n//         }\n//     };\n\n//     // Function to handle deleting a comment\n//     const handleDeleteComment = async (commentId) => {\n//         try {\n//             await deleteCommentApi(commentId);\n//             // Refresh comments after deleting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Show success toast message or perform any other necessary actions\n//             toast.success(\"Comment deleted successfully.\");\n//         } catch (error) {\n//             console.error('Error deleting comment:', error);\n//             // Show error toast message or perform any other necessary actions\n//             toast.error(\"You are not authorized to delete this comment.\");\n//         }\n//     };\n\n//     // Function to render threaded comments recursively\n//     const renderComments = (comments, renderedIds = new Set()) => {\n//         return (\n//             <ul className=\"list-unstyled\">\n//                 {comments.map(comment => {\n//                     if (renderedIds.has(comment._id)) {\n//                         return null; // Skip rendering if the comment is already rendered\n//                     }\n//                     renderedIds.add(comment._id); // Add comment ID to rendered set\n//                     return (\n//                         <li key={comment._id}>\n//                             <div>\n//                                 <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <small>Author:</small>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n//                                     </p>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <strong>Date:</strong>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                                     </p>\n//                                 </div>\n//                                 <p>{comment.content}</p>\n//                                 <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n//                                     {(comment.user.id === loggedInUserId || loggedInUserId === 'admin') && ( // Check if the logged-in user is the author of the comment or is an admin\n//                                         <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i> // Delete icon with onClick event\n//                                     )}\n//                                     <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i> {/* Bootstrap reply icon */}\n//                                 </div>\n//                                 {replyingTo === comment._id && ( // Conditional rendering for reply text field\n//                                     <div className=\"reply-text-field\">\n//                                         <div className=\"input-group mb-3\">\n//                                             <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n//                                         </div>\n//                                     </div>\n//                                 )}\n//                             </div>\n//                             {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>} {/* Render replies recursively */}\n//                         </li>\n//                     );\n//                 })}\n//             </ul>\n//         );\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h2>{blog.title}</h2>\n//                     <p className=\"small text-muted mb-2\">\n//                         <strong>Author:</strong>{' '}\n//                         <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n//                     </p>\n//                     <p className=\"small text-muted mb-4\">\n//                         <strong>Date:</strong>{' '}\n//                         <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                     </p>\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <img\n//                         src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n//                         alt={blog.title}\n//                         className=\"img-fluid mb-4\"\n//                     />\n//                     <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n//                     <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n//                         <i className=\"bi bi-chat-square-dots\"></i> {/* Bootstrap comment icon */}\n//                     </div>\n//                     {commenting && ( // Conditional rendering for the comment text field\n//                         <div className=\"comment-text-field\">\n//                             <div className=\"input-group mb-3\">\n//                                 <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n//                             </div>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h4 className=\"mt-5\">Comments:</h4>\n//                     {renderComments(threadedComments)}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SingleBlogPost;\n\nimport React, { useEffect, useState } from 'react';\nimport { toast } from \"react-toastify\";\nimport { deleteBlogApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SingleBlogPost = ({\n  blogId,\n  loggedInUserId\n}) => {\n  _s();\n  const [blog, setBlog] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [replyingTo, setReplyingTo] = useState(null);\n  const [commenting, setCommenting] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const blogResponse = await getSingleBlogApi(blogId);\n        setBlog(blogResponse.data.blog);\n        const commentsResponse = await getCommentsApi(blogId);\n        setComments(commentsResponse.data.comments);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [blogId]);\n  if (!blog) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 16\n    }, this);\n  }\n  const handleCommentIconClick = () => {\n    setCommenting(!commenting);\n  };\n  const handleCommentSubmit = async () => {\n    const commentContent = document.getElementById('commentInput').value;\n    try {\n      await postCommentApi(blogId, {\n        content: commentContent\n      });\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n      document.getElementById('commentInput').value = '';\n      setCommenting(false);\n      toast.success(\"Comment posted successfully.\");\n    } catch (error) {\n      console.error('Error posting comment:', error);\n    }\n  };\n  const handleReplySubmit = async (parentCommentId, replyContent) => {\n    try {\n      await postCommentApi(blogId, {\n        content: replyContent,\n        parentComment: parentCommentId\n      });\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n      setReplyingTo(null);\n      toast.success(\"Reply posted successfully.\");\n    } catch (error) {\n      toast.error(\"Error posting reply.\");\n      console.error('Error posting reply:', error);\n    }\n  };\n  const handleDeleteBlog = async () => {\n    try {\n      await deleteBlogApi(blogId);\n      // Add functionality to redirect to a different page after successful deletion if needed\n      toast.success(\"Blog deleted successfully.\");\n    } catch (error) {\n      console.error('Error deleting blog:', error);\n      toast.error(\"You are not authorized to delete this blog.\");\n    }\n  };\n  const handleEditBlog = () => {\n    // Add functionality to navigate to the edit page for this blog\n    // This could be done using React Router or any navigation library\n  };\n\n  //     // Function to handle deleting a comment\n  const handleDeleteComment = async commentId => {\n    try {\n      await deleteCommentApi(commentId);\n      // Refresh comments after deleting\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n\n      // Show success toast message or perform any other necessary actions\n      toast.success(\"Comment deleted successfully.\");\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      // Show error toast message or perform any other necessary actions\n      toast.error(\"You are not authorized to delete this comment.\");\n    }\n  };\n\n  //  Function to render threaded comments recursively\n  const renderComments = (comments, renderedIds = new Set()) => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-unstyled\",\n      children: comments.map(comment => {\n        if (renderedIds.has(comment._id)) {\n          return null; // Skip rendering if the comment is already rendered\n        }\n\n        renderedIds.add(comment._id); // Add comment ID to rendered set\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-meta\",\n              style: {\n                marginBottom: '0.5em'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small text-muted\",\n                style: {\n                  fontSize: '0.9em',\n                  margin: '0'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Author:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 41\n                }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-grey\",\n                  style: {\n                    fontSize: '0.8em'\n                  },\n                  children: `${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small text-muted\",\n                style: {\n                  fontSize: '0.9em',\n                  margin: '0'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 41\n                }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-grey\",\n                  style: {\n                    fontSize: '0.8em'\n                  },\n                  children: moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: comment.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-icons\",\n              style: {\n                marginTop: '-1em'\n              },\n              children: [(comment.user.id === loggedInUserId || loggedInUserId === 'admin') &&\n              /*#__PURE__*/\n              // Check if the logged-in user is the author of the comment or is an admin\n              _jsxDEV(\"i\", {\n                className: \"bi bi-trash-fill\",\n                onClick: () => handleDeleteComment(comment._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 41\n              }, this) // Delete icon with onClick event\n              , /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bi bi-reply-fill\",\n                onClick: () => setReplyingTo(comment._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 37\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 33\n            }, this), replyingTo === comment._id &&\n            /*#__PURE__*/\n            // Conditional rendering for reply text field\n            _jsxDEV(\"div\", {\n              className: \"reply-text-field\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-group mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"replyInput\",\n                  type: \"text\",\n                  className: \"form-control\",\n                  placeholder: \"Write a reply...\",\n                  style: {\n                    width: 'calc(100% - 42px)',\n                    marginBottom: '0.5em'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-outline-dark me-2\",\n                  type: \"button\",\n                  style: {\n                    backgroundColor: 'white',\n                    color: 'black',\n                    borderRadius: '35px',\n                    marginBottom: '0.5em'\n                  },\n                  onClick: () => setReplyingTo(null),\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-outline-dark me-2\",\n                  type: \"button\",\n                  style: {\n                    backgroundColor: 'black',\n                    color: 'white',\n                    borderRadius: '35px',\n                    marginBottom: '0.5em'\n                  },\n                  onClick: () => handleReplySubmit(comment._id, document.getElementById('replyInput').value),\n                  children: \"Reply\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 29\n          }, this), comment.replies && /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: renderComments(comment.replies, renderedIds)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 49\n          }, this), \" \"]\n        }, comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [blog.user._id === loggedInUserId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"edit-delete-icons\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-pencil-fill\",\n            onClick: handleEditBlog\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-trash-fill\",\n            onClick: handleDeleteBlog\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"small text-muted mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Author:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 25\n          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-grey\",\n            children: `${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"small text-muted mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 25\n          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-grey\",\n            children: moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: blog.blogImageUrl || 'https://via.placeholder.com/600x400',\n          alt: blog.title,\n          className: \"img-fluid mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: blog.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-icon\",\n          style: {\n            textAlign: 'left',\n            marginTop: '1em'\n          },\n          onClick: handleCommentIconClick,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-chat-square-dots\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 25\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this), commenting &&\n        /*#__PURE__*/\n        // Conditional rendering for the comment text field\n        _jsxDEV(\"div\", {\n          className: \"comment-text-field\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"commentInput\",\n              type: \"text\",\n              className: \"form-control\",\n              placeholder: \"Write a comment...\",\n              style: {\n                width: 'calc(100% - 42px)',\n                marginBottom: '0.5em'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-dark me-2\",\n              type: \"button\",\n              style: {\n                backgroundColor: 'white',\n                color: 'black',\n                borderRadius: '35px',\n                marginBottom: '0.5em'\n              },\n              onClick: () => setCommenting(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-dark me-2\",\n              type: \"button\",\n              style: {\n                backgroundColor: 'black',\n                color: 'white',\n                borderRadius: '35px',\n                marginBottom: '0.5em'\n              },\n              onClick: handleCommentSubmit,\n              children: \"Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"mt-5\",\n          children: \"Comments:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 21\n        }, this), renderComments(comments)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 9\n  }, this);\n};\n_s(SingleBlogPost, \"25wYlOIB0yReXiVz56Jbuh7+U/Y=\");\n_c = SingleBlogPost;\nexport default SingleBlogPost;\nvar _c;\n$RefreshReg$(_c, \"SingleBlogPost\");","map":{"version":3,"names":["React","useEffect","useState","toast","deleteBlogApi","getCommentsApi","getSingleBlogApi","postCommentApi","moment","jsxDEV","_jsxDEV","SingleBlogPost","blogId","loggedInUserId","_s","blog","setBlog","comments","setComments","replyingTo","setReplyingTo","commenting","setCommenting","fetchData","blogResponse","data","commentsResponse","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","handleCommentIconClick","handleCommentSubmit","commentContent","document","getElementById","value","content","success","handleReplySubmit","parentCommentId","replyContent","parentComment","handleDeleteBlog","handleEditBlog","handleDeleteComment","commentId","deleteCommentApi","renderComments","renderedIds","Set","className","map","comment","has","_id","add","style","marginBottom","fontSize","margin","user","firstName","lastName","createdAt","format","marginTop","id","onClick","type","placeholder","width","backgroundColor","color","borderRadius","replies","title","src","blogImageUrl","alt","whiteSpace","textAlign","_c","$RefreshReg$"],"sources":["/Users/suyash/frontend-31a-ImSuis/src/components/SingleBlogPost.jsx"],"sourcesContent":["// import moment from 'moment';\n// import React, { useEffect, useState } from 'react';\n// import { toast } from \"react-toastify\";\n// import { deleteCommentApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\n\n// const SingleBlogPost = ({ blogId, loggedInUserId }) => {\n//     const [blog, setBlog] = useState(null);\n//     const [comments, setComments] = useState([]);\n//     const [replyingTo, setReplyingTo] = useState(null); // State to track which comment is being replied to\n//     const [commenting, setCommenting] = useState(false); // State to track whether the comment text field should be displayed\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const blogResponse = await getSingleBlogApi(blogId);\n//                 console.log('Blog Data:', blogResponse.data); // Log the blog data\n//                 setBlog(blogResponse.data.blog);\n\n//                 const commentsResponse = await getCommentsApi(blogId); // Fetch comments using the getCommentsApi function\n//                 console.log('Comments Data:', commentsResponse.data); // Log the comments data\n//                 setComments(commentsResponse.data.comments);\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//             }\n//         };\n\n//         fetchData();\n//     }, [blogId]);\n\n//     if (!blog) {\n//         return <div>Loading...</div>;\n//     }\n\n//     // Function to organize comments into a tree-like structure\n//     const organizeComments = (comments) => {\n//         const commentMap = new Map();\n//         const rootComments = [];\n\n//         // Map each comment to its ID\n//         comments.forEach(comment => {\n//             commentMap.set(comment._id, comment);\n//         });\n\n//         // Iterate over comments to build the tree\n//         comments.forEach(comment => {\n//             if (comment.parentComment) {\n//                 const parentComment = commentMap.get(comment.parentComment);\n//                 if (parentComment) {\n//                     if (!parentComment.replies) {\n//                         parentComment.replies = [];\n//                     }\n//                     parentComment.replies.push(comment);\n//                 }\n//             } else {\n//                 rootComments.push(comment);\n//             }\n//         });\n\n//         return rootComments;\n//     };\n\n//     // Organize comments into a tree-like structure\n//     const threadedComments = organizeComments(comments);\n\n//     // Function to handle click on the comment icon\n//     const handleCommentIconClick = () => {\n//         setCommenting(!commenting); // Toggle the commenting state\n//     };\n\n//     // Function to post a comment\n//     const handleCommentSubmit = async () => {\n//         // Get the content of the comment from the input field\n//         const commentContent = document.getElementById('commentInput').value;\n\n//         try {\n//             // Post the comment to the backend\n//             await postCommentApi(blogId, { content: commentContent });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n//             // Clear the input field and hide the comment text field\n//             document.getElementById('commentInput').value = '';\n//             setCommenting(false);\n//             toast.success(\"Comment posted successfully.\");\n//         } catch (error) {\n//             console.error('Error posting comment:', error);\n//         }\n//     };\n\n//     // Function to handle submitting a reply\n//     const handleReplySubmit = async (parentCommentId, replyContent) => {\n//         try {\n//             await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Clear replyingTo state\n//             setReplyingTo(null);\n//             toast.success(\"Reply posted successfully.\");\n//         } catch (error) {\n//             toast.error(\"Error posting reply.\");\n//             console.error('Error posting reply:', error);\n//         }\n//     };\n\n//     // Function to handle deleting a comment\n//     const handleDeleteComment = async (commentId) => {\n//         try {\n//             await deleteCommentApi(commentId);\n//             // Refresh comments after deleting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Show success toast message or perform any other necessary actions\n//             toast.success(\"Comment deleted successfully.\");\n//         } catch (error) {\n//             console.error('Error deleting comment:', error);\n//             // Show error toast message or perform any other necessary actions\n//             toast.error(\"You are not authorized to delete this comment.\");\n//         }\n//     };\n\n//     // Function to render threaded comments recursively\n//     const renderComments = (comments, renderedIds = new Set()) => {\n//         return (\n//             <ul className=\"list-unstyled\">\n//                 {comments.map(comment => {\n//                     if (renderedIds.has(comment._id)) {\n//                         return null; // Skip rendering if the comment is already rendered\n//                     }\n//                     renderedIds.add(comment._id); // Add comment ID to rendered set\n//                     return (\n//                         <li key={comment._id}>\n//                             <div>\n//                                 <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <small>Author:</small>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n//                                     </p>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <strong>Date:</strong>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                                     </p>\n//                                 </div>\n//                                 <p>{comment.content}</p>\n//                                 <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n//                                     {(comment.user.id === loggedInUserId || loggedInUserId === 'admin') && ( // Check if the logged-in user is the author of the comment or is an admin\n//                                         <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i> // Delete icon with onClick event\n//                                     )}\n//                                     <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i> {/* Bootstrap reply icon */}\n//                                 </div>\n//                                 {replyingTo === comment._id && ( // Conditional rendering for reply text field\n//                                     <div className=\"reply-text-field\">\n//                                         <div className=\"input-group mb-3\">\n//                                             <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n//                                         </div>\n//                                     </div>\n//                                 )}\n//                             </div>\n//                             {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>} {/* Render replies recursively */}\n//                         </li>\n//                     );\n//                 })}\n//             </ul>\n//         );\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h2>{blog.title}</h2>\n//                     <p className=\"small text-muted mb-2\">\n//                         <strong>Author:</strong>{' '}\n//                         <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n//                     </p>\n//                     <p className=\"small text-muted mb-4\">\n//                         <strong>Date:</strong>{' '}\n//                         <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                     </p>\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <img\n//                         src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n//                         alt={blog.title}\n//                         className=\"img-fluid mb-4\"\n//                     />\n//                     <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n//                     <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n//                         <i className=\"bi bi-chat-square-dots\"></i> {/* Bootstrap comment icon */}\n//                     </div>\n//                     {commenting && ( // Conditional rendering for the comment text field\n//                         <div className=\"comment-text-field\">\n//                             <div className=\"input-group mb-3\">\n//                                 <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n//                             </div>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h4 className=\"mt-5\">Comments:</h4>\n//                     {renderComments(threadedComments)}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SingleBlogPost;\n\n\nimport React, { useEffect, useState } from 'react';\nimport { toast } from \"react-toastify\";\nimport { deleteBlogApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\nimport moment from 'moment';\n\nconst SingleBlogPost = ({ blogId, loggedInUserId }) => {\n    const [blog, setBlog] = useState(null);\n    const [comments, setComments] = useState([]);\n    const [replyingTo, setReplyingTo] = useState(null);\n    const [commenting, setCommenting] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const blogResponse = await getSingleBlogApi(blogId);\n                setBlog(blogResponse.data.blog);\n\n                const commentsResponse = await getCommentsApi(blogId);\n                setComments(commentsResponse.data.comments);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData();\n    }, [blogId]);\n\n    if (!blog) {\n        return <div>Loading...</div>;\n    }\n\n    const handleCommentIconClick = () => {\n        setCommenting(!commenting);\n    };\n\n    const handleCommentSubmit = async () => {\n        const commentContent = document.getElementById('commentInput').value;\n\n        try {\n            await postCommentApi(blogId, { content: commentContent });\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n            document.getElementById('commentInput').value = '';\n            setCommenting(false);\n            toast.success(\"Comment posted successfully.\");\n        } catch (error) {\n            console.error('Error posting comment:', error);\n        }\n    };\n\n    const handleReplySubmit = async (parentCommentId, replyContent) => {\n        try {\n            await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n            setReplyingTo(null);\n            toast.success(\"Reply posted successfully.\");\n        } catch (error) {\n            toast.error(\"Error posting reply.\");\n            console.error('Error posting reply:', error);\n        }\n    };\n\n    const handleDeleteBlog = async () => {\n        try {\n            await deleteBlogApi(blogId);\n            // Add functionality to redirect to a different page after successful deletion if needed\n            toast.success(\"Blog deleted successfully.\");\n        } catch (error) {\n            console.error('Error deleting blog:', error);\n            toast.error(\"You are not authorized to delete this blog.\");\n        }\n    };\n\n    const handleEditBlog = () => {\n        // Add functionality to navigate to the edit page for this blog\n        // This could be done using React Router or any navigation library\n    };\n\n    //     // Function to handle deleting a comment\n    const handleDeleteComment = async (commentId) => {\n        try {\n            await deleteCommentApi(commentId);\n            // Refresh comments after deleting\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n\n            // Show success toast message or perform any other necessary actions\n            toast.success(\"Comment deleted successfully.\");\n        } catch (error) {\n            console.error('Error deleting comment:', error);\n            // Show error toast message or perform any other necessary actions\n            toast.error(\"You are not authorized to delete this comment.\");\n        }\n    };\n\n//  Function to render threaded comments recursively\n    const renderComments = (comments, renderedIds = new Set()) => {\n        return (\n            <ul className=\"list-unstyled\">\n                {comments.map(comment => {\n                    if (renderedIds.has(comment._id)) {\n                        return null; // Skip rendering if the comment is already rendered\n                    }\n                    renderedIds.add(comment._id); // Add comment ID to rendered set\n                    return (\n                        <li key={comment._id}>\n                            <div>\n                                <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n                                    <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n                                        <small>Author:</small>{' '}\n                                        <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n                                    </p>\n                                    <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n                                        <strong>Date:</strong>{' '}\n                                        <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n                                    </p>\n                                </div>\n                                <p>{comment.content}</p>\n                                <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n                                    {(comment.user.id === loggedInUserId || loggedInUserId === 'admin') && ( // Check if the logged-in user is the author of the comment or is an admin\n                                        <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i> // Delete icon with onClick event\n                                    )}\n                                    <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i> {/* Bootstrap reply icon */}\n                                </div>\n                                {replyingTo === comment._id && ( // Conditional rendering for reply text field\n                                    <div className=\"reply-text-field\">\n                                        <div className=\"input-group mb-3\">\n                                            <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n                                            <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n                                            <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                            {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>} {/* Render replies recursively */}\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    {/* Edit and delete icons */}\n                    {blog.user._id === loggedInUserId && (\n                        <div className=\"edit-delete-icons\">\n                            <i className=\"bi bi-pencil-fill\" onClick={handleEditBlog}></i>\n                            <i className=\"bi bi-trash-fill\" onClick={handleDeleteBlog}></i>\n                        </div>\n                    )}\n                    <h2>{blog.title}</h2>\n                    <p className=\"small text-muted mb-2\">\n                        <strong>Author:</strong>{' '}\n                        <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n                    </p>\n                    <p className=\"small text-muted mb-4\">\n                        <strong>Date:</strong>{' '}\n                        <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n                    </p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    <img\n                        src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n                        alt={blog.title}\n                        className=\"img-fluid mb-4\"\n                    />\n                    <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n                    <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n                        <i className=\"bi bi-chat-square-dots\"></i> {/* Bootstrap comment icon */}\n                    </div>\n                    {commenting && ( // Conditional rendering for the comment text field\n                        <div className=\"comment-text-field\">\n                            <div className=\"input-group mb-3\">\n                                <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n                                <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n                                <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    <h4 className=\"mt-5\">Comments:</h4>\n                    {renderComments(comments)}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SingleBlogPost;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,aAAa,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,cAAc,QAAQ,YAAY;AAC5F,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}