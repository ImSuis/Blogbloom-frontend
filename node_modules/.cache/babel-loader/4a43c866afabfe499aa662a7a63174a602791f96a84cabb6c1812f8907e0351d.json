{"ast":null,"code":"var _jsxFileName = \"/Users/suyash/frontend-31a-ImSuis/src/components/SingleBlogPost.jsx\",\n  _s = $RefreshSig$();\n// import moment from 'moment';\n// import React, { useEffect, useState } from 'react';\n// import { toast } from \"react-toastify\";\n// import { deleteCommentApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\n\n// const SingleBlogPost = ({ blogId, loggedInUserId }) => {\n//     const [blog, setBlog] = useState(null);\n//     const [comments, setComments] = useState([]);\n//     const [replyingTo, setReplyingTo] = useState(null); // State to track which comment is being replied to\n//     const [commenting, setCommenting] = useState(false); // State to track whether the comment text field should be displayed\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const blogResponse = await getSingleBlogApi(blogId);\n//                 console.log('Blog Data:', blogResponse.data); // Log the blog data\n//                 setBlog(blogResponse.data.blog);\n\n//                 const commentsResponse = await getCommentsApi(blogId); // Fetch comments using the getCommentsApi function\n//                 console.log('Comments Data:', commentsResponse.data); // Log the comments data\n//                 setComments(commentsResponse.data.comments);\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//             }\n//         };\n\n//         fetchData();\n//     }, [blogId]);\n\n//     if (!blog) {\n//         return <div>Loading...</div>;\n//     }\n\n//     // Function to organize comments into a tree-like structure\n//     const organizeComments = (comments) => {\n//         const commentMap = new Map();\n//         const rootComments = [];\n\n//         // Map each comment to its ID\n//         comments.forEach(comment => {\n//             commentMap.set(comment._id, comment);\n//         });\n\n//         // Iterate over comments to build the tree\n//         comments.forEach(comment => {\n//             if (comment.parentComment) {\n//                 const parentComment = commentMap.get(comment.parentComment);\n//                 if (parentComment) {\n//                     if (!parentComment.replies) {\n//                         parentComment.replies = [];\n//                     }\n//                     parentComment.replies.push(comment);\n//                 }\n//             } else {\n//                 rootComments.push(comment);\n//             }\n//         });\n\n//         return rootComments;\n//     };\n\n//     // Organize comments into a tree-like structure\n//     const threadedComments = organizeComments(comments);\n\n//     // Function to handle click on the comment icon\n//     const handleCommentIconClick = () => {\n//         setCommenting(!commenting); // Toggle the commenting state\n//     };\n\n//     // Function to post a comment\n//     const handleCommentSubmit = async () => {\n//         // Get the content of the comment from the input field\n//         const commentContent = document.getElementById('commentInput').value;\n\n//         try {\n//             // Post the comment to the backend\n//             await postCommentApi(blogId, { content: commentContent });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n//             // Clear the input field and hide the comment text field\n//             document.getElementById('commentInput').value = '';\n//             setCommenting(false);\n//             toast.success(\"Comment posted successfully.\");\n//         } catch (error) {\n//             console.error('Error posting comment:', error);\n//         }\n//     };\n\n//     // Function to handle submitting a reply\n//     const handleReplySubmit = async (parentCommentId, replyContent) => {\n//         try {\n//             await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Clear replyingTo state\n//             setReplyingTo(null);\n//             toast.success(\"Reply posted successfully.\");\n//         } catch (error) {\n//             toast.error(\"Error posting reply.\");\n//             console.error('Error posting reply:', error);\n//         }\n//     };\n\n//     // Function to handle deleting a comment\n//     const handleDeleteComment = async (commentId) => {\n//         try {\n//             await deleteCommentApi(commentId);\n//             // Refresh comments after deleting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Show success toast message or perform any other necessary actions\n//             toast.success(\"Comment deleted successfully.\");\n//         } catch (error) {\n//             console.error('Error deleting comment:', error);\n//             // Show error toast message or perform any other necessary actions\n//             toast.error(\"You are not authorized to delete this comment.\");\n//         }\n//     };\n\n//     // Function to render threaded comments recursively\n//     const renderComments = (comments, renderedIds = new Set()) => {\n//         return (\n//             <ul className=\"list-unstyled\">\n//                 {comments.map(comment => {\n//                     if (renderedIds.has(comment._id)) {\n//                         return null; // Skip rendering if the comment is already rendered\n//                     }\n//                     renderedIds.add(comment._id); // Add comment ID to rendered set\n//                     return (\n//                         <li key={comment._id}>\n//                             <div>\n//                                 <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <small>Author:</small>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n//                                     </p>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <strong>Date:</strong>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                                     </p>\n//                                 </div>\n//                                 <p>{comment.content}</p>\n//                                 <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n//                                     {(comment.user.id === loggedInUserId || loggedInUserId === 'admin') && ( // Check if the logged-in user is the author of the comment or is an admin\n//                                         <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i> // Delete icon with onClick event\n//                                     )}\n//                                     <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i> {/* Bootstrap reply icon */}\n//                                 </div>\n//                                 {replyingTo === comment._id && ( // Conditional rendering for reply text field\n//                                     <div className=\"reply-text-field\">\n//                                         <div className=\"input-group mb-3\">\n//                                             <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n//                                         </div>\n//                                     </div>\n//                                 )}\n//                             </div>\n//                             {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>} {/* Render replies recursively */}\n//                         </li>\n//                     );\n//                 })}\n//             </ul>\n//         );\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h2>{blog.title}</h2>\n//                     <p className=\"small text-muted mb-2\">\n//                         <strong>Author:</strong>{' '}\n//                         <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n//                     </p>\n//                     <p className=\"small text-muted mb-4\">\n//                         <strong>Date:</strong>{' '}\n//                         <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                     </p>\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <img\n//                         src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n//                         alt={blog.title}\n//                         className=\"img-fluid mb-4\"\n//                     />\n//                     <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n//                     <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n//                         <i className=\"bi bi-chat-square-dots\"></i> {/* Bootstrap comment icon */}\n//                     </div>\n//                     {commenting && ( // Conditional rendering for the comment text field\n//                         <div className=\"comment-text-field\">\n//                             <div className=\"input-group mb-3\">\n//                                 <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n//                             </div>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h4 className=\"mt-5\">Comments:</h4>\n//                     {renderComments(threadedComments)}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SingleBlogPost;\n\n// const handleEditBlog = () => {\n\n// }\n\n// const handleDeleteBlog = () => {\n\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { toast } from 'react-toastify';\nimport { deleteCommentApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SingleBlogPost = ({\n  blogId,\n  loggedInUserId\n}) => {\n  _s();\n  const [blog, setBlog] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [replyingTo, setReplyingTo] = useState(null);\n  const [commenting, setCommenting] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const blogResponse = await getSingleBlogApi(blogId);\n        setBlog(blogResponse.data.blog);\n        const commentsResponse = await getCommentsApi(blogId);\n        setComments(commentsResponse.data.comments);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [blogId]);\n  if (!blog) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 16\n    }, this);\n  }\n  const organizeComments = comments => {\n    const commentMap = new Map();\n    const rootComments = [];\n    comments.forEach(comment => {\n      commentMap.set(comment._id, comment);\n    });\n    comments.forEach(comment => {\n      if (comment.parentComment) {\n        const parentComment = commentMap.get(comment.parentComment);\n        if (parentComment) {\n          if (!parentComment.replies) {\n            parentComment.replies = [];\n          }\n          parentComment.replies.push(comment);\n        }\n      } else {\n        rootComments.push(comment);\n      }\n    });\n    return rootComments;\n  };\n  const threadedComments = organizeComments(comments);\n  const handleCommentIconClick = () => {\n    setCommenting(!commenting);\n  };\n  const handleCommentSubmit = async () => {\n    const commentContent = document.getElementById('commentInput').value;\n    try {\n      await postCommentApi(blogId, {\n        content: commentContent\n      });\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n      document.getElementById('commentInput').value = '';\n      setCommenting(false);\n      toast.success(\"Comment posted successfully.\");\n    } catch (error) {\n      console.error('Error posting comment:', error);\n    }\n  };\n  const handleReplySubmit = async (parentCommentId, replyContent) => {\n    try {\n      await postCommentApi(blogId, {\n        content: replyContent,\n        parentComment: parentCommentId\n      });\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n      setReplyingTo(null);\n      toast.success(\"Reply posted successfully.\");\n    } catch (error) {\n      toast.error(\"Error posting reply.\");\n      console.error('Error posting reply:', error);\n    }\n  };\n  const handleDeleteComment = async commentId => {\n    try {\n      await deleteCommentApi(commentId);\n      const commentsResponse = await getCommentsApi(blogId);\n      setComments(commentsResponse.data.comments);\n      toast.success(\"Comment deleted successfully.\");\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n      toast.error(\"You are not authorized to delete this comment.\");\n    }\n  };\n\n  // const handleEditBlog = () => {\n\n  // }\n\n  // const handleDeleteBlog = () => {\n\n  // }\n\n  const renderComments = (comments, renderedIds = new Set()) => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-unstyled\",\n      children: comments.map(comment => {\n        if (renderedIds.has(comment._id)) {\n          return null;\n        }\n        renderedIds.add(comment._id);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-meta\",\n              style: {\n                marginBottom: '0.5em'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small text-muted\",\n                style: {\n                  fontSize: '0.9em',\n                  margin: '0'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Author:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 41\n                }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-grey\",\n                  style: {\n                    fontSize: '0.8em'\n                  },\n                  children: `${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small text-muted\",\n                style: {\n                  fontSize: '0.9em',\n                  margin: '0'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 41\n                }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-grey\",\n                  style: {\n                    fontSize: '0.8em'\n                  },\n                  children: moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 37\n              }, this), comment.user._id === loggedInUserId && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"action-icons\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-trash-fill\",\n                  onClick: () => handleDeleteComment(comment._id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: comment.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-icons\",\n              style: {\n                marginTop: '-1em'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bi bi-reply-fill\",\n                onClick: () => setReplyingTo(comment._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 33\n            }, this), replyingTo === comment._id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"reply-text-field\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"input-group mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"replyInput\",\n                  type: \"text\",\n                  className: \"form-control\",\n                  placeholder: \"Write a reply...\",\n                  style: {\n                    width: 'calc(100% - 42px)',\n                    marginBottom: '0.5em'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-outline-dark me-2\",\n                  type: \"button\",\n                  style: {\n                    backgroundColor: 'white',\n                    color: 'black',\n                    borderRadius: '35px',\n                    marginBottom: '0.5em'\n                  },\n                  onClick: () => setReplyingTo(null),\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-outline-dark me-2\",\n                  type: \"button\",\n                  style: {\n                    backgroundColor: 'black',\n                    color: 'white',\n                    borderRadius: '35px',\n                    marginBottom: '0.5em'\n                  },\n                  onClick: () => handleReplySubmit(comment._id, document.getElementById('replyInput').value),\n                  children: \"Reply\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 29\n          }, this), comment.replies && /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: renderComments(comment.replies, renderedIds)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 49\n          }, this)]\n        }, comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: blog.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 21\n        }, this), blog.user._id === loggedInUserId &&\n        /*#__PURE__*/\n        // Check if the blog author is the logged-in user\n        _jsxDEV(\"div\", {\n          className: \"action-icons\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-pencil-fill\",\n            onClick: () => handleEditBlog(blog._id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-trash-fill\",\n            onClick: () => handleDeleteBlog(blog._id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"small text-muted mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Author:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 25\n          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-grey\",\n            children: `${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"small text-muted mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 25\n          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-grey\",\n            children: moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: blog.blogImageUrl || 'https://via.placeholder.com/600x400',\n          alt: blog.title,\n          className: \"img-fluid mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: blog.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-icon\",\n          style: {\n            textAlign: 'left',\n            marginTop: '1em'\n          },\n          onClick: handleCommentIconClick,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-chat-square-dots\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 21\n        }, this), commenting && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-text-field\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"commentInput\",\n              type: \"text\",\n              className: \"form-control\",\n              placeholder: \"Write a comment...\",\n              style: {\n                width: 'calc(100% - 42px)',\n                marginBottom: '0.5em'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-dark me-2\",\n              type: \"button\",\n              style: {\n                backgroundColor: 'white',\n                color: 'black',\n                borderRadius: '35px',\n                marginBottom: '0.5em'\n              },\n              onClick: () => setCommenting(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-dark me-2\",\n              type: \"button\",\n              style: {\n                backgroundColor: 'black',\n                color: 'white',\n                borderRadius: '35px',\n                marginBottom: '0.5em'\n              },\n              onClick: handleCommentSubmit,\n              children: \"Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 offset-md-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"mt-5\",\n          children: \"Comments:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }, this), renderComments(threadedComments)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 9\n  }, this);\n};\n_s(SingleBlogPost, \"25wYlOIB0yReXiVz56Jbuh7+U/Y=\");\n_c = SingleBlogPost;\nexport default SingleBlogPost;\nvar _c;\n$RefreshReg$(_c, \"SingleBlogPost\");","map":{"version":3,"names":["React","useEffect","useState","moment","toast","deleteCommentApi","getCommentsApi","getSingleBlogApi","postCommentApi","jsxDEV","_jsxDEV","SingleBlogPost","blogId","loggedInUserId","_s","blog","setBlog","comments","setComments","replyingTo","setReplyingTo","commenting","setCommenting","fetchData","blogResponse","data","commentsResponse","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","organizeComments","commentMap","Map","rootComments","forEach","comment","set","_id","parentComment","get","replies","push","threadedComments","handleCommentIconClick","handleCommentSubmit","commentContent","document","getElementById","value","content","success","handleReplySubmit","parentCommentId","replyContent","handleDeleteComment","commentId","renderComments","renderedIds","Set","className","map","has","add","style","marginBottom","fontSize","margin","user","firstName","lastName","createdAt","format","onClick","marginTop","id","type","placeholder","width","backgroundColor","color","borderRadius","title","handleEditBlog","handleDeleteBlog","src","blogImageUrl","alt","whiteSpace","textAlign","_c","$RefreshReg$"],"sources":["/Users/suyash/frontend-31a-ImSuis/src/components/SingleBlogPost.jsx"],"sourcesContent":["// import moment from 'moment';\n// import React, { useEffect, useState } from 'react';\n// import { toast } from \"react-toastify\";\n// import { deleteCommentApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\n\n// const SingleBlogPost = ({ blogId, loggedInUserId }) => {\n//     const [blog, setBlog] = useState(null);\n//     const [comments, setComments] = useState([]);\n//     const [replyingTo, setReplyingTo] = useState(null); // State to track which comment is being replied to\n//     const [commenting, setCommenting] = useState(false); // State to track whether the comment text field should be displayed\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const blogResponse = await getSingleBlogApi(blogId);\n//                 console.log('Blog Data:', blogResponse.data); // Log the blog data\n//                 setBlog(blogResponse.data.blog);\n\n//                 const commentsResponse = await getCommentsApi(blogId); // Fetch comments using the getCommentsApi function\n//                 console.log('Comments Data:', commentsResponse.data); // Log the comments data\n//                 setComments(commentsResponse.data.comments);\n//             } catch (error) {\n//                 console.error('Error fetching data:', error);\n//             }\n//         };\n\n//         fetchData();\n//     }, [blogId]);\n\n//     if (!blog) {\n//         return <div>Loading...</div>;\n//     }\n\n//     // Function to organize comments into a tree-like structure\n//     const organizeComments = (comments) => {\n//         const commentMap = new Map();\n//         const rootComments = [];\n\n//         // Map each comment to its ID\n//         comments.forEach(comment => {\n//             commentMap.set(comment._id, comment);\n//         });\n\n//         // Iterate over comments to build the tree\n//         comments.forEach(comment => {\n//             if (comment.parentComment) {\n//                 const parentComment = commentMap.get(comment.parentComment);\n//                 if (parentComment) {\n//                     if (!parentComment.replies) {\n//                         parentComment.replies = [];\n//                     }\n//                     parentComment.replies.push(comment);\n//                 }\n//             } else {\n//                 rootComments.push(comment);\n//             }\n//         });\n\n//         return rootComments;\n//     };\n\n//     // Organize comments into a tree-like structure\n//     const threadedComments = organizeComments(comments);\n\n//     // Function to handle click on the comment icon\n//     const handleCommentIconClick = () => {\n//         setCommenting(!commenting); // Toggle the commenting state\n//     };\n\n//     // Function to post a comment\n//     const handleCommentSubmit = async () => {\n//         // Get the content of the comment from the input field\n//         const commentContent = document.getElementById('commentInput').value;\n\n//         try {\n//             // Post the comment to the backend\n//             await postCommentApi(blogId, { content: commentContent });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n//             // Clear the input field and hide the comment text field\n//             document.getElementById('commentInput').value = '';\n//             setCommenting(false);\n//             toast.success(\"Comment posted successfully.\");\n//         } catch (error) {\n//             console.error('Error posting comment:', error);\n//         }\n//     };\n\n//     // Function to handle submitting a reply\n//     const handleReplySubmit = async (parentCommentId, replyContent) => {\n//         try {\n//             await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n//             // Refresh comments after posting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Clear replyingTo state\n//             setReplyingTo(null);\n//             toast.success(\"Reply posted successfully.\");\n//         } catch (error) {\n//             toast.error(\"Error posting reply.\");\n//             console.error('Error posting reply:', error);\n//         }\n//     };\n\n//     // Function to handle deleting a comment\n//     const handleDeleteComment = async (commentId) => {\n//         try {\n//             await deleteCommentApi(commentId);\n//             // Refresh comments after deleting\n//             const commentsResponse = await getCommentsApi(blogId);\n//             setComments(commentsResponse.data.comments);\n\n//             // Show success toast message or perform any other necessary actions\n//             toast.success(\"Comment deleted successfully.\");\n//         } catch (error) {\n//             console.error('Error deleting comment:', error);\n//             // Show error toast message or perform any other necessary actions\n//             toast.error(\"You are not authorized to delete this comment.\");\n//         }\n//     };\n\n//     // Function to render threaded comments recursively\n//     const renderComments = (comments, renderedIds = new Set()) => {\n//         return (\n//             <ul className=\"list-unstyled\">\n//                 {comments.map(comment => {\n//                     if (renderedIds.has(comment._id)) {\n//                         return null; // Skip rendering if the comment is already rendered\n//                     }\n//                     renderedIds.add(comment._id); // Add comment ID to rendered set\n//                     return (\n//                         <li key={comment._id}>\n//                             <div>\n//                                 <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <small>Author:</small>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n//                                     </p>\n//                                     <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n//                                         <strong>Date:</strong>{' '}\n//                                         <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                                     </p>\n//                                 </div>\n//                                 <p>{comment.content}</p>\n//                                 <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n//                                     {(comment.user.id === loggedInUserId || loggedInUserId === 'admin') && ( // Check if the logged-in user is the author of the comment or is an admin\n//                                         <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i> // Delete icon with onClick event\n//                                     )}\n//                                     <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i> {/* Bootstrap reply icon */}\n//                                 </div>\n//                                 {replyingTo === comment._id && ( // Conditional rendering for reply text field\n//                                     <div className=\"reply-text-field\">\n//                                         <div className=\"input-group mb-3\">\n//                                             <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n//                                             <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n//                                         </div>\n//                                     </div>\n//                                 )}\n//                             </div>\n//                             {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>} {/* Render replies recursively */}\n//                         </li>\n//                     );\n//                 })}\n//             </ul>\n//         );\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h2>{blog.title}</h2>\n//                     <p className=\"small text-muted mb-2\">\n//                         <strong>Author:</strong>{' '}\n//                         <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n//                     </p>\n//                     <p className=\"small text-muted mb-4\">\n//                         <strong>Date:</strong>{' '}\n//                         <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n//                     </p>\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <img\n//                         src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n//                         alt={blog.title}\n//                         className=\"img-fluid mb-4\"\n//                     />\n//                     <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n//                     <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n//                         <i className=\"bi bi-chat-square-dots\"></i> {/* Bootstrap comment icon */}\n//                     </div>\n//                     {commenting && ( // Conditional rendering for the comment text field\n//                         <div className=\"comment-text-field\">\n//                             <div className=\"input-group mb-3\">\n//                                 <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n//                                 <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n//                             </div>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className=\"row\">\n//                 <div className=\"col-md-10 offset-md-1\">\n//                     <h4 className=\"mt-5\">Comments:</h4>\n//                     {renderComments(threadedComments)}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SingleBlogPost;\n\n// const handleEditBlog = () => {\n\n// }\n\n// const handleDeleteBlog = () => {\n\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { toast } from 'react-toastify';\nimport { deleteCommentApi, getCommentsApi, getSingleBlogApi, postCommentApi } from '../api/Api';\n\nconst SingleBlogPost = ({ blogId, loggedInUserId }) => {\n    const [blog, setBlog] = useState(null);\n    const [comments, setComments] = useState([]);\n    const [replyingTo, setReplyingTo] = useState(null);\n    const [commenting, setCommenting] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const blogResponse = await getSingleBlogApi(blogId);\n                setBlog(blogResponse.data.blog);\n\n                const commentsResponse = await getCommentsApi(blogId);\n                setComments(commentsResponse.data.comments);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData();\n    }, [blogId]);\n\n    if (!blog) {\n        return <div>Loading...</div>;\n    }\n\n    const organizeComments = (comments) => {\n        const commentMap = new Map();\n        const rootComments = [];\n\n        comments.forEach(comment => {\n            commentMap.set(comment._id, comment);\n        });\n\n        comments.forEach(comment => {\n            if (comment.parentComment) {\n                const parentComment = commentMap.get(comment.parentComment);\n                if (parentComment) {\n                    if (!parentComment.replies) {\n                        parentComment.replies = [];\n                    }\n                    parentComment.replies.push(comment);\n                }\n            } else {\n                rootComments.push(comment);\n            }\n        });\n\n        return rootComments;\n    };\n\n    const threadedComments = organizeComments(comments);\n\n    const handleCommentIconClick = () => {\n        setCommenting(!commenting);\n    };\n\n    const handleCommentSubmit = async () => {\n        const commentContent = document.getElementById('commentInput').value;\n\n        try {\n            await postCommentApi(blogId, { content: commentContent });\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n            document.getElementById('commentInput').value = '';\n            setCommenting(false);\n            toast.success(\"Comment posted successfully.\");\n        } catch (error) {\n            console.error('Error posting comment:', error);\n        }\n    };\n\n    const handleReplySubmit = async (parentCommentId, replyContent) => {\n        try {\n            await postCommentApi(blogId, { content: replyContent, parentComment: parentCommentId });\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n            setReplyingTo(null);\n            toast.success(\"Reply posted successfully.\");\n        } catch (error) {\n            toast.error(\"Error posting reply.\");\n            console.error('Error posting reply:', error);\n        }\n    };\n\n    const handleDeleteComment = async (commentId) => {\n        try {\n            await deleteCommentApi(commentId);\n            const commentsResponse = await getCommentsApi(blogId);\n            setComments(commentsResponse.data.comments);\n            toast.success(\"Comment deleted successfully.\");\n        } catch (error) {\n            console.error('Error deleting comment:', error);\n            toast.error(\"You are not authorized to delete this comment.\");\n        }\n    };\n\n    // const handleEditBlog = () => {\n\n// }\n\n// const handleDeleteBlog = () => {\n\n// }\n\n    const renderComments = (comments, renderedIds = new Set()) => {\n        return (\n            <ul className=\"list-unstyled\">\n                {comments.map(comment => {\n                    if (renderedIds.has(comment._id)) {\n                        return null;\n                    }\n                    renderedIds.add(comment._id);\n                    return (\n                        <li key={comment._id}>\n                            <div>\n                                <div className=\"comment-meta\" style={{ marginBottom: '0.5em' }}>\n                                    <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n                                        <small>Author:</small>{' '}\n                                        <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{`${comment.user.firstName || 'Unknown'} ${comment.user.lastName || 'Unknown'}`}</span>\n                                    </p>\n                                    <p className=\"small text-muted\" style={{ fontSize: '0.9em', margin: '0' }}>\n                                        <strong>Date:</strong>{' '}\n                                        <span className=\"text-grey\" style={{ fontSize: '0.8em' }}>{moment(comment.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n                                    </p>\n                                    {(comment.user._id === loggedInUserId) && (\n                                        <div className=\"action-icons\">\n                                            <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteComment(comment._id)}></i>\n                                        </div>\n                                    )}\n                                </div>\n                                <p>{comment.content}</p>\n                                <div className=\"action-icons\" style={{ marginTop: '-1em' }}>\n                                    <i className=\"bi bi-reply-fill\" onClick={() => setReplyingTo(comment._id)}></i>\n                                </div>\n                                {replyingTo === comment._id && (\n                                    <div className=\"reply-text-field\">\n                                        <div className=\"input-group mb-3\">\n                                            <input id=\"replyInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a reply...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n                                            <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setReplyingTo(null)}>Cancel</button>\n                                            <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => handleReplySubmit(comment._id, document.getElementById('replyInput').value)}>Reply</button>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                            {comment.replies && <ul>{renderComments(comment.replies, renderedIds)}</ul>}\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    <h2>{blog.title}</h2>\n                    {(blog.user._id === loggedInUserId) && ( // Check if the blog author is the logged-in user\n                        <div className=\"action-icons\">\n                            <i className=\"bi bi-pencil-fill\" onClick={() => handleEditBlog(blog._id)}></i>\n                            <i className=\"bi bi-trash-fill\" onClick={() => handleDeleteBlog(blog._id)}></i>\n                        </div>\n                    )}\n                    <p className=\"small text-muted mb-2\">\n                        <strong>Author:</strong>{' '}\n                        <span className=\"text-grey\">{`${blog.user.firstName || 'Unknown'} ${blog.user.lastName || 'Unknown'}`}</span>\n                    </p>\n                    <p className=\"small text-muted mb-4\">\n                        <strong>Date:</strong>{' '}\n                        <span className=\"text-grey\">{moment(blog.createdAt).format('MMMM Do YYYY, h:mm a')}</span>\n                    </p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    <img\n                        src={blog.blogImageUrl || 'https://via.placeholder.com/600x400'}\n                        alt={blog.title}\n                        className=\"img-fluid mb-4\"\n                    />\n                    <p style={{ whiteSpace: 'pre-wrap' }}>{blog.content}</p>\n                    <div className=\"comment-icon\" style={{ textAlign: 'left', marginTop: '1em' }} onClick={handleCommentIconClick}>\n                        <i className=\"bi bi-chat-square-dots\"></i>\n                    </div>\n                    {commenting && (\n                        <div className=\"comment-text-field\">\n                            <div className=\"input-group mb-3\">\n                                <input id=\"commentInput\" type=\"text\" className=\"form-control\" placeholder=\"Write a comment...\" style={{ width: 'calc(100% - 42px)', marginBottom: '0.5em' }} />\n                                <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'white', color: 'black', borderRadius: '35px', marginBottom: '0.5em' }} onClick={() => setCommenting(false)}>Cancel</button>\n                                <button className=\"btn btn-outline-dark me-2\" type=\"button\" style={{ backgroundColor: 'black', color: 'white', borderRadius: '35px', marginBottom: '0.5em' }} onClick={handleCommentSubmit}>Comment</button>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-10 offset-md-1\">\n                    <h4 className=\"mt-5\">Comments:</h4>\n                    {renderComments(threadedComments)}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SingleBlogPost;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,gBAAgB,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,cAAc,QAAQ,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}