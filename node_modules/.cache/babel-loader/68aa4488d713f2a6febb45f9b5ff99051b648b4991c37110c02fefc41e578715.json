{"ast":null,"code":"import axios from \"axios\";\nconst Api = axios.create({\n  baseURL: \"http://localhost:5501\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\"\n  }\n});\nexport const testApi = () => Api.get(\"/test\");\nexport const createUserApi = data => Api.post(\"/api/user/create\", data);\n\n// export const loginUserApi = async (data) => {\n//   try {\n//     const response = await Api.post(\"/api/user/login\", data);\n//     const { token, user } = response.data; // Extract user information from response\n//     localStorage.setItem(\"token\", token);\n//     console.log(\"Token stored in localStorage:\", token);\n//     return { token, user }; // Return both token and user information\n//   } catch (error) {\n//     throw error;\n//   }\n// };\n\nexport const loginUserApi = async () => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      throw new Error(\"Token not found in localStorage\");\n    }\n    const response = await Api.get(\"/api/user/profile\", getAuthorizationHeader());\n    return response.data; // Return the user data directly\n  } catch (error) {\n    throw error;\n  }\n};\nexport const createBlogApi = (data, config) => Api.post(\"/api/blog/create-blog\", data, config);\nexport const getAllBlogsApi = () => Api.get(\"/api/blog/get-blogs\");\nexport const logoutUser = () => {\n  localStorage.removeItem(\"token\");\n};\nexport const getAuthorizationHeader = () => ({\n  headers: {\n    authorization: `Bearer ${localStorage.getItem(\"token\")}` // Include authorization token from local storage\n  }\n});\n\nexport const getSingleBlogApi = blogId => Api.get(`/api/blog/get-single-blog/${blogId}`, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const getCommentsApi = blogId => Api.get(`/api/comments/get-comment/${blogId}`, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const postCommentApi = (blogId, data) => Api.post(`/api/comments/create-comment/${blogId}`, data, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const deleteCommentApi = commentId => Api.delete(`/api/comments/delete-comment/${commentId}`, getAuthorizationHeader());\nexport const deleteBlogApi = blogId => Api.delete(`/api/blog/delete-blog/${blogId}`, getAuthorizationHeader());\nexport const editBlogApi = blogId => Api.put(`/api/blog/edit-blog/${blogId}`, getAuthorizationHeader());","map":{"version":3,"names":["axios","Api","create","baseURL","withCredentials","headers","testApi","get","createUserApi","data","post","loginUserApi","token","localStorage","getItem","Error","response","getAuthorizationHeader","error","createBlogApi","config","getAllBlogsApi","logoutUser","removeItem","authorization","getSingleBlogApi","blogId","getCommentsApi","postCommentApi","deleteCommentApi","commentId","delete","deleteBlogApi","editBlogApi","put"],"sources":["/Users/suyash/frontend-31a-ImSuis/src/api/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst Api = axios.create({\n  baseURL: \"http://localhost:5501\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\",\n  },\n});\n\nexport const testApi = () => Api.get(\"/test\");\n\nexport const createUserApi = (data) => Api.post(\"/api/user/create\", data);\n\n// export const loginUserApi = async (data) => {\n//   try {\n//     const response = await Api.post(\"/api/user/login\", data);\n//     const { token, user } = response.data; // Extract user information from response\n//     localStorage.setItem(\"token\", token);\n//     console.log(\"Token stored in localStorage:\", token);\n//     return { token, user }; // Return both token and user information\n//   } catch (error) {\n//     throw error;\n//   }\n// };\n\nexport const loginUserApi = async () => {\n  try {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      throw new Error(\"Token not found in localStorage\");\n    }\n\n    const response = await Api.get(\"/api/user/profile\", getAuthorizationHeader());\n    return response.data; // Return the user data directly\n  } catch (error) {\n    throw error;\n  }\n};\n\n\n\nexport const createBlogApi = (data, config) =>\n  Api.post(\"/api/blog/create-blog\", data, config);\n\nexport const getAllBlogsApi = () => Api.get(\"/api/blog/get-blogs\");\n\nexport const logoutUser = () => {\n  localStorage.removeItem(\"token\");\n};\n\nexport const getAuthorizationHeader = () => ({\n  headers: {\n    authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Include authorization token from local storage\n  },\n});\n\nexport const getSingleBlogApi = (blogId) =>\n  Api.get(`/api/blog/get-single-blog/${blogId}`, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const getCommentsApi = (blogId) =>\n  Api.get(`/api/comments/get-comment/${blogId}`, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const postCommentApi = (blogId, data) =>\n  Api.post(\n    `/api/comments/create-comment/${blogId}`,\n    data,\n    getAuthorizationHeader()\n  ); // Include authorization header in the request\n\nexport const deleteCommentApi = (commentId) =>\n  Api.delete(\n    `/api/comments/delete-comment/${commentId}`,\n    getAuthorizationHeader()\n  );\n\nexport const deleteBlogApi = (blogId) =>\n  Api.delete(`/api/blog/delete-blog/${blogId}`, getAuthorizationHeader());\n\nexport const editBlogApi = (blogId) =>\n  Api.put(`/api/blog/edit-blog/${blogId}`, getAuthorizationHeader());\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAML,GAAG,CAACM,GAAG,CAAC,OAAO,CAAC;AAE7C,OAAO,MAAMC,aAAa,GAAIC,IAAI,IAAKR,GAAG,CAACS,IAAI,CAAC,kBAAkB,EAAED,IAAI,CAAC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACV,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAC;IACpD;IAEA,MAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACM,GAAG,CAAC,mBAAmB,EAAEU,sBAAsB,CAAC,CAAC,CAAC;IAC7E,OAAOD,QAAQ,CAACP,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAID,OAAO,MAAMC,aAAa,GAAGA,CAACV,IAAI,EAAEW,MAAM,KACxCnB,GAAG,CAACS,IAAI,CAAC,uBAAuB,EAAED,IAAI,EAAEW,MAAM,CAAC;AAEjD,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAMpB,GAAG,CAACM,GAAG,CAAC,qBAAqB,CAAC;AAElE,OAAO,MAAMe,UAAU,GAAGA,CAAA,KAAM;EAC9BT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;AAED,OAAO,MAAMN,sBAAsB,GAAGA,CAAA,MAAO;EAC3CZ,OAAO,EAAE;IACPmB,aAAa,EAAG,UAASX,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC,CAAE;EAC5D;AACF,CAAC,CAAC;;AAEF,OAAO,MAAMW,gBAAgB,GAAIC,MAAM,IACrCzB,GAAG,CAACM,GAAG,CAAE,6BAA4BmB,MAAO,EAAC,EAAET,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE5E,OAAO,MAAMU,cAAc,GAAID,MAAM,IACnCzB,GAAG,CAACM,GAAG,CAAE,6BAA4BmB,MAAO,EAAC,EAAET,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE5E,OAAO,MAAMW,cAAc,GAAGA,CAACF,MAAM,EAAEjB,IAAI,KACzCR,GAAG,CAACS,IAAI,CACL,gCAA+BgB,MAAO,EAAC,EACxCjB,IAAI,EACJQ,sBAAsB,CAAC,CACzB,CAAC,CAAC,CAAC;;AAEL,OAAO,MAAMY,gBAAgB,GAAIC,SAAS,IACxC7B,GAAG,CAAC8B,MAAM,CACP,gCAA+BD,SAAU,EAAC,EAC3Cb,sBAAsB,CAAC,CACzB,CAAC;AAEH,OAAO,MAAMe,aAAa,GAAIN,MAAM,IAClCzB,GAAG,CAAC8B,MAAM,CAAE,yBAAwBL,MAAO,EAAC,EAAET,sBAAsB,CAAC,CAAC,CAAC;AAEzE,OAAO,MAAMgB,WAAW,GAAIP,MAAM,IAChCzB,GAAG,CAACiC,GAAG,CAAE,uBAAsBR,MAAO,EAAC,EAAET,sBAAsB,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}