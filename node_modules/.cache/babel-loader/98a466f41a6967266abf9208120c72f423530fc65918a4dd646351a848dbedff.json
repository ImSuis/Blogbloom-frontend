{"ast":null,"code":"import axios from \"axios\";\nconst Api = axios.create({\n  baseURL: \"http://localhost:5501\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\"\n  }\n});\nexport const testApi = () => Api.get(\"/test\");\nexport const createUserApi = data => Api.post(\"/api/user/create\", data);\nexport const loginUserApi = async data => {\n  try {\n    const response = await Api.post(\"/api/user/login\", data);\n    const {\n      token,\n      user\n    } = response.data;\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"user\", JSON.stringify(user)); // Stringify user object before storing\n    console.log(\"Token stored in localStorage:\", token);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const createBlogApi = (data, config) => Api.post(\"/api/blog/create-blog\", data, config);\nexport const getAllBlogsApi = () => Api.get(\"/api/blog/get-blogs\");\nexport const logoutUser = () => {\n  localStorage.removeItem(\"token\");\n};\nexport const getAuthorizationHeader = () => ({\n  headers: {\n    authorization: `Bearer ${localStorage.getItem(\"token\")}` // Include authorization token from local storage\n  }\n});\n\nexport const getSingleBlogApi = blogId => Api.get(`/api/blog/get-single-blog/${blogId}`, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const getCommentsApi = blogId => Api.get(`/api/comments/get-comment/${blogId}`, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const postCommentApi = (blogId, data) => Api.post(`/api/comments/create-comment/${blogId}`, data, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const deleteCommentApi = commentId => Api.delete(`/api/comments/delete-comment/${commentId}`, getAuthorizationHeader());\nexport const deleteBlogApi = blogId => Api.delete(`/api/blog/delete-blog/${blogId}`, getAuthorizationHeader());\nexport const editBlogApi = (blogId, formData, headers) => Api.put(`/api/blog/edit-blog/${blogId}`, formData, headers);\n\n// Update the paginationBlogApi function to use the correct endpoint URL\n// Update the paginationBlogApi function to use the correct endpoint URL\nexport const paginationBlogApi = async page => {\n  try {\n    // Use the correct endpoint URL with the page query parameter\n    const response = await Api.get(`/api/blog/get_pagination?page=${page}`);\n    console.log(\"Response from paginationBlogApi:\", response.data); // Log the response data\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching paginated blogs:\", error);\n    throw error;\n  }\n};\nexport const changePasswordApi = async (oldPassword, newPassword) => {\n  try {\n    // Make a PUT request to the change password endpoint\n    const response = await Api.put(\"/api/user/change-password\", {\n      oldPassword,\n      newPassword\n    },\n    // Send old password and new password in the request body\n    getAuthorizationHeader() // Include authorization header\n    );\n\n    console.log(\"Password changed successfully:\", response.data.message);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error changing password:\", error.response.data.message);\n    throw error;\n  }\n};\nexport const requestCodeApi = async email => {\n  try {\n    const response = await Api.post(\"/api/user/request-code\", {\n      email\n    });\n    console.log(\"Response from requestCodeApi:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error requesting code:\", error.response.data.message);\n    throw error;\n  }\n};\nexport const verifyCodeAndChangePasswordApi = async (email, code, newPassword) => {\n  try {\n    const response = await Api.put(\"/api/user/passwordverify-code-and-change-\", {\n      email,\n      code,\n      newPassword\n    });\n    console.log(\"Password changed successfully:\", response.data.message);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error changing password:\", error.response.data.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","Api","create","baseURL","withCredentials","headers","testApi","get","createUserApi","data","post","loginUserApi","response","token","user","localStorage","setItem","JSON","stringify","console","log","error","createBlogApi","config","getAllBlogsApi","logoutUser","removeItem","getAuthorizationHeader","authorization","getItem","getSingleBlogApi","blogId","getCommentsApi","postCommentApi","deleteCommentApi","commentId","delete","deleteBlogApi","editBlogApi","formData","put","paginationBlogApi","page","changePasswordApi","oldPassword","newPassword","message","requestCodeApi","email","verifyCodeAndChangePasswordApi","code"],"sources":["/Users/suyash/frontend-31a-ImSuis/src/api/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst Api = axios.create({\n  baseURL: \"http://localhost:5501\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\",\n  },\n});\n\nexport const testApi = () => Api.get(\"/test\");\n\nexport const createUserApi = (data) => Api.post(\"/api/user/create\", data);\n\nexport const loginUserApi = async (data) => {\n  try {\n    const response = await Api.post(\"/api/user/login\", data);\n    const { token, user } = response.data;\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"user\", JSON.stringify(user)); // Stringify user object before storing\n    console.log(\"Token stored in localStorage:\", token);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const createBlogApi = (data, config) =>\n  Api.post(\"/api/blog/create-blog\", data, config);\n\nexport const getAllBlogsApi = () => Api.get(\"/api/blog/get-blogs\");\n\nexport const logoutUser = () => {\n  localStorage.removeItem(\"token\");\n};\n\nexport const getAuthorizationHeader = () => ({\n  headers: {\n    authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Include authorization token from local storage\n  },\n});\n\nexport const getSingleBlogApi = (blogId) =>\n  Api.get(`/api/blog/get-single-blog/${blogId}`, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const getCommentsApi = (blogId) =>\n  Api.get(`/api/comments/get-comment/${blogId}`, getAuthorizationHeader()); // Include authorization header in the request\n\nexport const postCommentApi = (blogId, data) =>\n  Api.post(\n    `/api/comments/create-comment/${blogId}`,\n    data,\n    getAuthorizationHeader()\n  ); // Include authorization header in the request\n\nexport const deleteCommentApi = (commentId) =>\n  Api.delete(\n    `/api/comments/delete-comment/${commentId}`,\n    getAuthorizationHeader()\n  );\n\nexport const deleteBlogApi = (blogId) =>\n  Api.delete(`/api/blog/delete-blog/${blogId}`, getAuthorizationHeader());\n\nexport const editBlogApi = (blogId, formData, headers) =>\n  Api.put(`/api/blog/edit-blog/${blogId}`, formData, headers);\n\n// Update the paginationBlogApi function to use the correct endpoint URL\n// Update the paginationBlogApi function to use the correct endpoint URL\nexport const paginationBlogApi = async (page) => {\n  try {\n    // Use the correct endpoint URL with the page query parameter\n    const response = await Api.get(`/api/blog/get_pagination?page=${page}`);\n    console.log(\"Response from paginationBlogApi:\", response.data); // Log the response data\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching paginated blogs:\", error);\n    throw error;\n  }\n};\n\nexport const changePasswordApi = async (oldPassword, newPassword) => {\n  try {\n    // Make a PUT request to the change password endpoint\n    const response = await Api.put(\n      \"/api/user/change-password\",\n      { oldPassword, newPassword }, // Send old password and new password in the request body\n      getAuthorizationHeader() // Include authorization header\n    );\n    console.log(\"Password changed successfully:\", response.data.message);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error changing password:\", error.response.data.message);\n    throw error;\n  }\n};\n\nexport const requestCodeApi = async (email) => {\n  try {\n    const response = await Api.post(\"/api/user/request-code\", { email });\n    console.log(\"Response from requestCodeApi:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error requesting code:\", error.response.data.message);\n    throw error;\n  }\n};\n\nexport const verifyCodeAndChangePasswordApi = async (email, code, newPassword) => {\n  try {\n    const response = await Api.put(\"/api/user/passwordverify-code-and-change-\", { email, code, newPassword });\n    console.log(\"Password changed successfully:\", response.data.message);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error changing password:\", error.response.data.message);\n    throw error;\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}