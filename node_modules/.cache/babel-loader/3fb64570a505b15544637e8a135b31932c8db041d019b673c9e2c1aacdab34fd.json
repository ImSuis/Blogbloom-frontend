{"ast":null,"code":"var _jsxFileName = \"/Users/suyash/frontend-31a-ImSuis/src/pages/ViewBlog.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // Assuming you're using React Router for routing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewBlog = () => {\n  _s();\n  const {\n    blogId\n  } = useParams(); // Get the blogId from the URL params\n\n  const [blog, setBlog] = useState(null);\n  useEffect(() => {\n    // Fetch the blog post data when the component mounts\n    const fetchBlog = async () => {\n      try {\n        const response = await fetch(`/api/blogs/${blogId}`); // Assuming your backend endpoint for fetching a single blog post is /api/blogs/:blogId\n        const data = await response.json();\n        setBlog(data.blog);\n      } catch (error) {\n        console.error('Error fetching blog:', error);\n      }\n    };\n    fetchBlog(); // Call the fetchBlog function\n  }, [blogId]); // useEffect dependency on blogId to refetch data when blogId changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blog ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Author: \", blog.user.firstName, \" \", blog.user.lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(ViewBlog, \"0dQveXnsLDiiO82Y86R024Und1U=\", false, function () {\n  return [useParams];\n});\n_c = ViewBlog;\nexport default ViewBlog;\nvar _c;\n$RefreshReg$(_c, \"ViewBlog\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","ViewBlog","_s","blogId","blog","setBlog","fetchBlog","response","fetch","data","json","error","console","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","user","firstName","lastName","_c","$RefreshReg$"],"sources":["/Users/suyash/frontend-31a-ImSuis/src/pages/ViewBlog.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // Assuming you're using React Router for routing\n\nconst ViewBlog = () => {\n    const { blogId } = useParams(); // Get the blogId from the URL params\n\n    const [blog, setBlog] = useState(null);\n\n    useEffect(() => {\n        // Fetch the blog post data when the component mounts\n        const fetchBlog = async () => {\n            try {\n                const response = await fetch(`/api/blogs/${blogId}`); // Assuming your backend endpoint for fetching a single blog post is /api/blogs/:blogId\n                const data = await response.json();\n                setBlog(data.blog);\n            } catch (error) {\n                console.error('Error fetching blog:', error);\n            }\n        };\n\n        fetchBlog(); // Call the fetchBlog function\n    }, [blogId]); // useEffect dependency on blogId to refetch data when blogId changes\n\n    return (\n        <div>\n            {blog ? (\n                <div>\n                    <h2>{blog.title}</h2>\n                    <p>{blog.content}</p>\n                    <p>Author: {blog.user.firstName} {blog.user.lastName}</p>\n                    {/* Display other blog fields as needed */}\n                </div>\n            ) : (\n                <p>Loading...</p>\n            )}\n        </div>\n    );\n};\n\nexport default ViewBlog;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaL,MAAO,EAAC,CAAC,CAAC,CAAC;QACtD,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,OAAO,CAACI,IAAI,CAACL,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDL,SAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,oBACIH,OAAA;IAAAa,QAAA,EACKT,IAAI,gBACDJ,OAAA;MAAAa,QAAA,gBACIb,OAAA;QAAAa,QAAA,EAAKT,IAAI,CAACU;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBlB,OAAA;QAAAa,QAAA,EAAIT,IAAI,CAACe;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBlB,OAAA;QAAAa,QAAA,GAAG,UAAQ,EAACT,IAAI,CAACgB,IAAI,CAACC,SAAS,EAAC,GAAC,EAACjB,IAAI,CAACgB,IAAI,CAACE,QAAQ;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAExD,CAAC,gBAENlB,OAAA;MAAAa,QAAA,EAAG;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACnB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAChB,EAAA,CAlCID,QAAQ;EAAA,QACSH,SAAS;AAAA;AAAAyB,EAAA,GAD1BtB,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}