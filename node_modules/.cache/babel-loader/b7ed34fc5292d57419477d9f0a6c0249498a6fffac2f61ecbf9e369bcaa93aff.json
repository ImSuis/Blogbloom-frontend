{"ast":null,"code":"import axios from \"axios\";\nconst Api = axios.create({\n  baseURL: \"http://localhost:5501\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\"\n  }\n});\nexport const testApi = () => Api.get(\"/test\");\nexport const createUserApi = data => Api.post(\"/api/user/create\", data);\nexport const loginUserApi = async data => {\n  try {\n    const response = await Api.post(\"/api/user/login\", data);\n    const {\n      token\n    } = response.data; // Assuming the token is returned in the response\n    localStorage.setItem(\"token\", token); // Store the token in localStorage\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const createBlogApi = data => Api.post(\"/api/blog/create-blog\", data);\nexport const getAllBlogsApi = () => Api.get(\"/api/blog/get-blogs\");\nexport const logoutUser = () => {\n  localStorage.removeItem(\"token\"); // Clear the token from localStorage\n};\n\nexport const getAuthorizationHeader = () => ({\n  headers: {\n    authorization: `Bearer ${localStorage.getItem(\"token\")}` // Include the token in the authorization header\n  }\n});","map":{"version":3,"names":["axios","Api","create","baseURL","withCredentials","headers","testApi","get","createUserApi","data","post","loginUserApi","response","token","localStorage","setItem","error","createBlogApi","getAllBlogsApi","logoutUser","removeItem","getAuthorizationHeader","authorization","getItem"],"sources":["/Users/suyash/frontend-31a-ImSuis/src/api/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst Api = axios.create({\n  baseURL: \"http://localhost:5501\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\",\n  },\n});\n\nexport const testApi = () => Api.get(\"/test\");\n\nexport const createUserApi = (data) => Api.post(\"/api/user/create\", data);\n\nexport const loginUserApi = async (data) => {\n  try {\n    const response = await Api.post(\"/api/user/login\", data);\n    const { token } = response.data; // Assuming the token is returned in the response\n    localStorage.setItem(\"token\", token); // Store the token in localStorage\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const createBlogApi = (data) =>\n  Api.post(\"/api/blog/create-blog\", data);\n\nexport const getAllBlogsApi = () => Api.get(\"/api/blog/get-blogs\");\n\nexport const logoutUser = () => {\n  localStorage.removeItem(\"token\"); // Clear the token from localStorage\n};\n\nexport const getAuthorizationHeader = () => ({\n  headers: {\n    authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Include the token in the authorization header\n  },\n});\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAML,GAAG,CAACM,GAAG,CAAC,OAAO,CAAC;AAE7C,OAAO,MAAMC,aAAa,GAAIC,IAAI,IAAKR,GAAG,CAACS,IAAI,CAAC,kBAAkB,EAAED,IAAI,CAAC;AAEzE,OAAO,MAAME,YAAY,GAAG,MAAOF,IAAI,IAAK;EAC1C,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMX,GAAG,CAACS,IAAI,CAAC,iBAAiB,EAAED,IAAI,CAAC;IACxD,MAAM;MAAEI;IAAM,CAAC,GAAGD,QAAQ,CAACH,IAAI,CAAC,CAAC;IACjCK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC,CAAC,CAAC;IACtC,OAAOD,QAAQ;EACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIR,IAAI,IAChCR,GAAG,CAACS,IAAI,CAAC,uBAAuB,EAAED,IAAI,CAAC;AAEzC,OAAO,MAAMS,cAAc,GAAGA,CAAA,KAAMjB,GAAG,CAACM,GAAG,CAAC,qBAAqB,CAAC;AAElE,OAAO,MAAMY,UAAU,GAAGA,CAAA,KAAM;EAC9BL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;AACpC,CAAC;;AAED,OAAO,MAAMC,sBAAsB,GAAGA,CAAA,MAAO;EAC3ChB,OAAO,EAAE;IACPiB,aAAa,EAAG,UAASR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAE,EAAC,CAAE;EAC5D;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}